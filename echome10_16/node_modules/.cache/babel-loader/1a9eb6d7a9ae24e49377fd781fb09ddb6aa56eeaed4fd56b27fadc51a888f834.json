{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nconst SIZE = 10 * 1024 * 2;\nconst Status = {\n  wait: \"wait\",\n  pause: \"pause\",\n  uploading: \"uploading\"\n};\nconst CancelToken = axios.CancelToken;\nlet source = CancelToken.source();\nexport default {\n  name: \"fileUpload\",\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0));\n    }\n  },\n  computed: {\n    uploadPercentage() {\n      if (!this.container.file || !this.data.length) return 0;\n      const loaded = this.data.map(item => item.size * item.percentage).reduce((acc, cur) => acc + cur);\n      console.log(parseInt((loaded / this.container.file.size).toFixed(2)));\n      return parseInt((loaded / this.container.file.size).toFixed(2));\n    },\n    uploadDisabled() {\n      return !this.container.file || [Status.pause, Status.uploading].includes(this.status);\n    }\n  },\n  data() {\n    return {\n      isshow: false,\n      Status,\n      status: Status.wait,\n      container: {\n        file: null,\n        hash: \"\",\n        worker: null\n      },\n      requestList: [],\n      hashPercentage: 0,\n      data: [],\n      //保存切片文件数组\n      fakeUploadPercentage: 0\n    };\n  },\n  watch: {\n    uploadPercentage(now) {\n      if (now > this.fakeUploadPercentage) {\n        this.fakeUploadPercentage = now;\n      }\n    }\n  },\n  methods: {\n    //生成文件hash\n    calculateHash(fileChunkList) {\n      return new Promise(resolve => {\n        this.container.worker = new Worker(\"/hash.js\");\n        this.container.worker.postMessage({\n          fileChunkList\n        });\n        this.container.worker.onmessage = e => {\n          const {\n            percentage,\n            hash\n          } = e.data;\n          this.hashPercentage = percentage;\n          if (hash) {\n            resolve(hash);\n          }\n        };\n      });\n    },\n    parseFile(file) {\n      source.cancel(\"终止上传\");\n      source = CancelToken.source();\n      this.fakeUploadPercentage = 0; //重新选择文件的时候需要做一些必要的初始化\n      this.data = [];\n      this.requestList = [];\n      this.container.file = file;\n    },\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\n    async verifyUpload(filename, fileHash) {\n      const {\n        data\n      } = await axios.request({\n        url: \"http://localhost:401/verify\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename,\n          fileHash\n        })\n      });\n      return data; //不需要使用JSON.parse(data),axios内部已经做了转换\n    },\n\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks(uploadedList = []) {\n      const requestList = this.data.filter(({\n        hash\n      }) => !uploadedList.includes(hash)).map(({\n        chunk,\n        hash,\n        index\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"fileHash\", this.container.hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData,\n          index\n        }; //一定要加括号\n      }).map(({\n        formData,\n        index\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:401\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        onUploadProgress: this.uploadProgressEvent(this.data[index]),\n        cancelToken: source.token,\n        data: formData\n      }).then(() => {\n        this.requestList.push(requestList[index]);\n      }).catch(() => {}));\n      await Promise.all(requestList);\n      console.log(uploadedList, this.requestList, this.data);\n      if (uploadedList.length + this.requestList.length >= this.data.length) {\n        await this.mergeRequest();\n        this.status = Status.wait;\n      }\n    },\n    async mergeRequest() {\n      axios.request({\n        url: \"http://localhost:401/merge\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name,\n          size: SIZE,\n          fileHash: this.container.hash\n        })\n      }).then(() => {\n        this.container = {\n          file: null,\n          hash: \"\",\n          worker: null\n        };\n        this.status = Status.wait;\n      });\n    },\n    async upFileParse() {\n      if (!this.container.file) return;\n      this.status = Status.uploading;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.container.hash = await this.calculateHash(fileChunkList);\n      const {\n        shouldUpload,\n        uploadedList\n      } = await this.verifyUpload(this.container.file.name, this.container.hash);\n      if (!shouldUpload) {\n        this.fakeUploadPercentage = 100;\n        this.status = Status.wait;\n        this.container.file = null;\n        return;\n      }\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        fileHash: this.container.hash,\n        index,\n        hash: this.container.file.name + \"-\" + index,\n        size: file.size,\n        percentage: uploadedList.includes(index) ? 100 : 0\n      }));\n      await this.uploadChunks(uploadedList);\n    },\n    uploadProgressEvent(item) {\n      return e => {\n        item.percentage = parseInt(String(e.loaded / e.total * 100));\n      };\n    },\n    //暂停上传\n    handlePause() {\n      this.status = Status.pause;\n      this.requestList = [];\n      console.log(\"暂停上传了\");\n      source.cancel(\"暂停上传了\");\n      source = CancelToken.source(); //重置source，确保能够续传\n    },\n\n    async handleResume() {\n      this.status = Status.uploading;\n      const {\n        uploadedList\n      } = await this.verifyUpload(this.container.file.name, this.container.hash);\n      await this.uploadChunks(uploadedList);\n    }\n  }\n};","map":{"version":3,"names":["axios","SIZE","Status","wait","pause","uploading","CancelToken","source","name","filters","transformByte","val","Number","toFixed","computed","uploadPercentage","container","file","data","length","loaded","map","item","size","percentage","reduce","acc","cur","console","log","parseInt","uploadDisabled","includes","status","isshow","hash","worker","requestList","hashPercentage","fakeUploadPercentage","watch","now","methods","calculateHash","fileChunkList","Promise","resolve","Worker","postMessage","onmessage","e","parseFile","cancel","verifyUpload","filename","fileHash","request","url","method","headers","JSON","stringify","createFileChunk","push","slice","uploadChunks","uploadedList","filter","chunk","index","formData","FormData","append","header","onUploadProgress","uploadProgressEvent","cancelToken","token","then","catch","all","mergeRequest","upFileParse","shouldUpload","String","total","handlePause","handleResume"],"sources":["src/components/fileUpload.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 上传 -->\r\n    <el-upload class=\"upload-demo\" drag action=\"#\" :before-upload=\"parseFile\" :disabled=\"status !== Status.wait\">\r\n      <i class=\"el-icon-upload\"></i>\r\n\r\n      <div class=\"el-upload-text\">\r\n        <p v-if=\"container.file\">已选择：{{ container.file.name }}</p>\r\n        点击或拖拽访固定资产导入文件到此处，导入住在、商户数量受许可限制\r\n      </div>\r\n    </el-upload>\r\n    <el-button @click=\"upFileParse\" :disabled=\"uploadDisabled\">上传</el-button>\r\n    <el-button @click=\"handleResume\" v-if=\"status === Status.pause\"\r\n      >恢复上传</el-button\r\n    >\r\n    <el-button\r\n      v-else\r\n      @click=\"handlePause\"\r\n      :disabled=\"\r\n        status !== Status.uploading || !container.hash || !container.file\r\n      \"\r\n      >暂停上传</el-button\r\n    >\r\n    <el-progress type=\"circle\" :percentage=\"uploadPercentage\"></el-progress>\r\n    <el-progress type=\"circle\" :percentage=\"fakeUploadPercentage\">\r\n    </el-progress>\r\n\t<!-- 文件名hash的计算进度 -->\r\n    <div v-if=\"isshow\">calculate chunk hash</div>\r\n    <el-progress :percentage=\"hashPercentage\" v-if=\"isshow\"></el-progress>\r\n<!-- 每个分片的上传进度 -->\r\n    <el-table :data=\"data\" v-if=\"isshow\">\r\n      <el-table-column\r\n        prop=\"hash\"\r\n        label=\"chunk hash\"\r\n        align=\"center\"\r\n      ></el-table-column>\r\n      <el-table-column label=\"size(KB)\" align=\"center\" width=\"120\">\r\n        <template v-slot=\"{ row }\">\r\n          {{ row.size | transformByte }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"percentage\" align=\"center\">\r\n        <template v-slot=\"{ row }\">\r\n          <el-progress\r\n            :percentage=\"row.percentage\"\r\n            color=\"#909399\"\r\n          ></el-progress>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nconst SIZE = 10 * 1024 * 2;\r\nconst Status = {\r\n  wait: \"wait\",\r\n  pause: \"pause\",\r\n  uploading: \"uploading\",\r\n};\r\nconst CancelToken = axios.CancelToken;\r\nlet source = CancelToken.source();\r\nexport default {\r\n  name: \"fileUpload\",\r\n  filters: {\r\n    transformByte(val) {\r\n      return Number((val / 1024).toFixed(0));\r\n    },\r\n  },\r\n  computed: {\r\n    uploadPercentage() {\r\n      if (!this.container.file || !this.data.length) return 0;\r\n      const loaded = this.data\r\n        .map((item) => item.size * item.percentage)\r\n        .reduce((acc, cur) => acc + cur);\r\n      console.log(parseInt((loaded / this.container.file.size).toFixed(2)));\r\n      return parseInt((loaded / this.container.file.size).toFixed(2));\r\n    },\r\n    uploadDisabled() {\r\n      return (\r\n        !this.container.file ||\r\n        [Status.pause, Status.uploading].includes(this.status)\r\n      );\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n\t\tisshow:false,\r\n      Status,\r\n      status: Status.wait,\r\n      container: {\r\n        file: null,\r\n        hash: \"\",\r\n        worker: null,\r\n      },\r\n      requestList: [],\r\n      hashPercentage: 0,\r\n      data: [], //保存切片文件数组\r\n      fakeUploadPercentage: 0,\r\n    };\r\n  },\r\n  watch: {\r\n    uploadPercentage(now) {\r\n      if (now > this.fakeUploadPercentage) {\r\n        this.fakeUploadPercentage = now;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    //生成文件hash\r\n    calculateHash(fileChunkList) {\r\n      return new Promise((resolve) => {\r\n        this.container.worker = new Worker(\"/hash.js\");\r\n        this.container.worker.postMessage({ fileChunkList });\r\n        this.container.worker.onmessage = (e) => {\r\n          const { percentage, hash } = e.data;\r\n          this.hashPercentage = percentage;\r\n          if (hash) {\r\n            resolve(hash);\r\n          }\r\n        };\r\n      });\r\n    },\r\n    parseFile(file) {\r\n      source.cancel(\"终止上传\");\r\n      source = CancelToken.source();\r\n      this.fakeUploadPercentage = 0; //重新选择文件的时候需要做一些必要的初始化\r\n      this.data = [];\r\n      this.requestList = [];\r\n      this.container.file =file;\r\n    },\r\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\r\n    async verifyUpload(filename, fileHash) {\r\n      const { data } = await axios.request({\r\n        url: \"http://localhost:401/verify\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ filename, fileHash }),\r\n      });\r\n      return data; //不需要使用JSON.parse(data),axios内部已经做了转换\r\n    },\r\n    createFileChunk(file, size = SIZE) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    async uploadChunks(uploadedList = []) {\r\n      const requestList = this.data\r\n        .filter(({ hash }) => !uploadedList.includes(hash))\r\n        .map(({ chunk, hash, index }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"fileHash\", this.container.hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return { formData, index }; //一定要加括号\r\n        })\r\n        .map(({ formData, index }) =>\r\n          axios\r\n            .request({\r\n              method: \"post\",\r\n              url: \"http://localhost:401\",\r\n              header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n              onUploadProgress: this.uploadProgressEvent(this.data[index]),\r\n              cancelToken: source.token,\r\n              data: formData,\r\n            })\r\n            .then(() => {\r\n              this.requestList.push(requestList[index]);\r\n            })\r\n            .catch(() => {})\r\n        );\r\n      await Promise.all(requestList);\r\n      console.log(uploadedList, this.requestList, this.data);\r\n      if (uploadedList.length + this.requestList.length >= this.data.length) {\r\n        await this.mergeRequest();\r\n        this.status = Status.wait;\r\n      }\r\n    },\r\n    async mergeRequest() {\r\n      axios\r\n        .request({\r\n          url: \"http://localhost:401/merge\",\r\n          method: \"post\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify({\r\n            filename: this.container.file.name,\r\n            size: SIZE,\r\n            fileHash: this.container.hash,\r\n          }),\r\n        })\r\n        .then(() => {\r\n          this.container = {\r\n            file: null,\r\n            hash: \"\",\r\n            worker: null,\r\n          };\r\n          this.status = Status.wait;\r\n        });\r\n    },\r\n    async upFileParse() {\r\n      if (!this.container.file) return;\r\n      this.status = Status.uploading;\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      this.container.hash = await this.calculateHash(fileChunkList);\r\n      const { shouldUpload, uploadedList } = await this.verifyUpload(\r\n        this.container.file.name,\r\n        this.container.hash\r\n      );\r\n      if (!shouldUpload) {\r\n        this.fakeUploadPercentage = 100;\r\n        this.status = Status.wait;\r\n        this.container.file = null;\r\n        return;\r\n      }\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        fileHash: this.container.hash,\r\n        index,\r\n        hash: this.container.file.name + \"-\" + index,\r\n        size: file.size,\r\n        percentage: uploadedList.includes(index) ? 100 : 0,\r\n      }));\r\n      await this.uploadChunks(uploadedList);\r\n    },\r\n    uploadProgressEvent(item) {\r\n      return (e) => {\r\n        item.percentage = parseInt(String((e.loaded / e.total) * 100));\r\n      };\r\n    },\r\n    //暂停上传\r\n    handlePause() {\r\n      this.status = Status.pause;\r\n      this.requestList = [];\r\n      console.log(\"暂停上传了\");\r\n      source.cancel(\"暂停上传了\");\r\n      source = CancelToken.source(); //重置source，确保能够续传\r\n    },\r\n    async handleResume() {\r\n      this.status = Status.uploading;\r\n      const { uploadedList } = await this.verifyUpload(\r\n        this.container.file.name,\r\n        this.container.hash\r\n      );\r\n      await this.uploadChunks(uploadedList);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}