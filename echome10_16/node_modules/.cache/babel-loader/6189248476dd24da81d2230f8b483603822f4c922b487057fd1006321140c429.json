{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst SIZE = 10 * 1024 * 2;\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0));\n    }\n  },\n  computed: {\n    uploadPercentage() {\n      if (!this.container.file || !this.data.length) return 0;\n      const loaded = this.data.map(item => item.size * item.percentage).reduce((acc, cur) => acc + cur);\n      return parseInt((loaded / this.container.file.size).toFixed(2));\n    }\n  },\n  data() {\n    return {\n      container: {\n        file: null,\n        hash: \"\",\n        worker: null\n      },\n      hashPercentage: 0,\n      data: [] //保存切片文件数组\n    };\n  },\n\n  methods: {\n    //生成文件hash\n    calculateHash(fileChunkList) {\n      return new Promise(resolve => {\n        this.container.worker = new Worker(\"/hash.js\");\n        this.container.worker.postMessage({\n          fileChunkList\n        });\n        this.container.worker.onmessage = e => {\n          const {\n            percentage,\n            hash\n          } = e.data;\n          this.hashPercentage = percentage;\n          if (hash) {\n            resolve(hash);\n          }\n        };\n      });\n    },\n    parseFile(e) {\n      this.container.file = e.target.files[0];\n    },\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\n    async verifyUpload(filename, fileHash) {\n      const {\n        data\n      } = await axios.request({\n        url: \"http://localhost:401/verify\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename,\n          fileHash\n        })\n      });\n      return JSON.parse(data);\n    },\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks() {\n      const requestList = this.data.map(({\n        chunk,\n        hash,\n        index\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"fileHash\", this.container.hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData,\n          index\n        }; //一定要加括号\n      }).map(({\n        formData,\n        index\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:401\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        onUploadProgress: this.uploadProgressEvent(this.data[index]),\n        data: formData\n      }).then(res => {\n        console.log(res);\n      }));\n      await Promise.all(requestList);\n      this.mergeRequest();\n    },\n    async mergeRequest() {\n      axios.request({\n        url: \"http://localhost:401/merge\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name,\n          size: SIZE,\n          fileHash: this.container.hash\n        })\n      });\n    },\n    async upFileParse() {\n      if (!this.container.file) return;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.container.hash = await this.calculateHash(fileChunkList);\n      const {\n        shouldUpload\n      } = await this.verifyUpload(this.container.file.name, this.container.hash);\n      if (!shouldUpload) {\n        alert(\"文件已经上成功\");\n        return;\n      }\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        fileHash: this.container.hash,\n        index,\n        hash: this.container.file.name + \"-\" + index,\n        size: file.size,\n        percentage: 0\n      }));\n      await this.uploadChunks();\n    },\n    uploadProgressEvent(item) {\n      return e => {\n        item.percentage = parseInt(String(e.loaded / e.total * 100));\n      };\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","SIZE","components","name","filters","transformByte","val","Number","toFixed","computed","uploadPercentage","container","file","data","length","loaded","map","item","size","percentage","reduce","acc","cur","parseInt","hash","worker","hashPercentage","methods","calculateHash","fileChunkList","Promise","resolve","Worker","postMessage","onmessage","e","parseFile","target","files","verifyUpload","filename","fileHash","request","url","headers","JSON","stringify","parse","createFileChunk","push","slice","uploadChunks","requestList","chunk","index","formData","FormData","append","method","header","onUploadProgress","uploadProgressEvent","then","res","console","log","all","mergeRequest","upFileParse","shouldUpload","alert","String","total"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n    <el-progress type=\"circle\" :percentage=\"uploadPercentage\"></el-progress>\r\n    <div>calculate chunk hash</div>\r\n    <el-progress :percentage=\"hashPercentage\"></el-progress>\r\n\r\n    <el-table :data=\"data\">\r\n      <el-table-column\r\n        prop=\"hash\"\r\n        label=\"chunk hash\"\r\n        align=\"center\"\r\n      ></el-table-column>\r\n      <el-table-column label=\"size(KB)\" align=\"center\" width=\"120\">\r\n        <template v-slot=\"{ row }\">\r\n          {{ row.size | transformByte }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"percentage\" align=\"center\">\r\n        <template v-slot=\"{ row }\">\r\n          <el-progress\r\n            :percentage=\"row.percentage\"\r\n            color=\"#909399\"\r\n          ></el-progress>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst SIZE = 10 * 1024 * 2;\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  filters: {\r\n    transformByte(val) {\r\n      return Number((val / 1024).toFixed(0));\r\n    },\r\n  },\r\n  computed: {\r\n    uploadPercentage() {\r\n      if (!this.container.file || !this.data.length) return 0;\r\n      const loaded = this.data\r\n        .map((item) => item.size * item.percentage)\r\n        .reduce((acc, cur) => acc + cur);\r\n      return parseInt((loaded / this.container.file.size).toFixed(2));\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      container: {\r\n        file: null,\r\n        hash: \"\",\r\n        worker: null,\r\n      },\r\n      hashPercentage: 0,\r\n      data: [], //保存切片文件数组\r\n    };\r\n  },\r\n  methods: {\r\n    //生成文件hash\r\n    calculateHash(fileChunkList) {\r\n      return new Promise((resolve) => {\r\n        this.container.worker = new Worker(\"/hash.js\");\r\n        this.container.worker.postMessage({ fileChunkList });\r\n        this.container.worker.onmessage = (e) => {\r\n          const { percentage, hash } = e.data;\r\n          this.hashPercentage = percentage;\r\n          if (hash) {\r\n            resolve(hash);\r\n          }\r\n        };\r\n      });\r\n    },\r\n    parseFile(e) {\r\n      this.container.file = e.target.files[0];\r\n    },\r\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\r\n    async verifyUpload(filename, fileHash) {\r\n      const { data } = await axios.request({\r\n        url: \"http://localhost:401/verify\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ filename, fileHash }),\r\n      });\r\n      return JSON.parse(data);\r\n    },\r\n    createFileChunk(file, size = SIZE) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    async uploadChunks() {\r\n      const requestList = this.data\r\n        .map(({ chunk, hash, index }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"fileHash\", this.container.hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return { formData, index }; //一定要加括号\r\n        })\r\n        .map(({ formData, index }) =>\r\n          axios\r\n            .request({\r\n              method: \"post\",\r\n              url: \"http://localhost:401\",\r\n              header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n              onUploadProgress: this.uploadProgressEvent(this.data[index]),\r\n              data: formData,\r\n            })\r\n            .then((res) => {\r\n              console.log(res);\r\n            })\r\n        );\r\n      await Promise.all(requestList);\r\n      this.mergeRequest();\r\n    },\r\n    async mergeRequest() {\r\n      axios.request({\r\n        url: \"http://localhost:401/merge\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({\r\n          filename: this.container.file.name,\r\n          size: SIZE,\r\n          fileHash: this.container.hash,\r\n        }),\r\n      });\r\n    },\r\n    async upFileParse() {\r\n      if (!this.container.file) return;\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      this.container.hash = await this.calculateHash(fileChunkList);\r\n      const { shouldUpload } = await this.verifyUpload(\r\n        this.container.file.name,\r\n        this.container.hash\r\n      );\r\n      if (!shouldUpload) {\r\n        alert(\"文件已经上成功\");\r\n        return;\r\n      }\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        fileHash: this.container.hash,\r\n        index,\r\n        hash: this.container.file.name + \"-\" + index,\r\n        size: file.size,\r\n        percentage: 0,\r\n      }));\r\n      await this.uploadChunks();\r\n    },\r\n    uploadProgressEvent(item) {\r\n      return (e) => {\r\n        item.percentage = parseInt(String((e.loaded / e.total) * 100));\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}