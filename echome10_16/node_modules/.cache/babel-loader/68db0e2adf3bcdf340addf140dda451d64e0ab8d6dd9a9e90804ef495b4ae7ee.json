{"ast":null,"code":"import axios from \"axios\";\nconst codeMessage = {\n  200: \"服务器成功返回请求的数据\",\n  201: \"新建或修改数据成功\",\n  204: \"删除数据成功\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作\",\n  401: \"用户没有访问权限（令牌、用户名、密码错误）\"\n};\nexport function mylocalrequest(config) {\n  const instance = axios.create({\n    baseURL: \"http://127.0.0.1:300/pc\"\n  });\n\n  //响应拦截器\n  instance.interceptors.response.use(res => {\n    if (res.code === 200) {\n      this.notifySuccess(res.msg);\n    }\n    return res.data;\n  });\n  return instance(config);\n}\nexport function myrequest(config) {\n  const instance = axios.create({\n    baseURL: \"http://127.0.0.1:300/pc\"\n  });\n  //   instance.interceptors.request.use((config) => {\n  //     let token = localStorage.getItem(\"token\");\n  //     console.log(token);\n\n  //     if (token) {\n  //       config.headerss[\"Authorization\"] = token;\n  //     }\n  //     return config;\n  //   });\n  //   instance.interceptors.response.use((res) => {\n  //     let token = localStorage.getItem(\"token\");\n  //     if (token) {\n  //       res.headers[\"Authorization\"] = token;\n  //     }\n  //     return res.data;\n  //   });\n  return instance(config);\n}\nexport function request(config) {\n  const instance = axios.create({\n    baseURL: \"/pc\"\n  });\n  instance.interceptors.request.use(config => {\n    let token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"x-Token\"] = token;\n    }\n    return config;\n  }, () => {});\n  instance.interceptors.response.use(res => {\n    if (Object.keys(codeMessage).includes(`${res.data.code}`)) {\n      this.notifySuccess(codeMessage[res.data.code]);\n    }\n    return res;\n  }, err => {\n    console.log(err);\n    return err;\n  });\n  return instance(config);\n}","map":{"version":3,"names":["axios","codeMessage","mylocalrequest","config","instance","create","baseURL","interceptors","response","use","res","code","notifySuccess","msg","data","myrequest","request","token","localStorage","getItem","headers","Object","keys","includes","err","console","log"],"sources":["D:/前端/e家项目仿照/echome3_16/echome3_16/src/network/config.js"],"sourcesContent":["import axios from \"axios\";\r\nconst codeMessage = {\r\n  200: \"服务器成功返回请求的数据\",\r\n  201: \"新建或修改数据成功\",\r\n  204: \"删除数据成功\",\r\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作\",\r\n  401: \"用户没有访问权限（令牌、用户名、密码错误）\",\r\n};\r\nexport function mylocalrequest(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:300/pc\",\r\n  });\r\n\r\n  //响应拦截器\r\n  instance.interceptors.response.use((res) => {\r\n    if (res.code === 200) {\r\n      this.notifySuccess(res.msg);\r\n    }\r\n    return res.data;\r\n  });\r\n  return instance(config);\r\n}\r\n\r\nexport function myrequest(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:300/pc\",\r\n\r\n  });\r\n//   instance.interceptors.request.use((config) => {\r\n//     let token = localStorage.getItem(\"token\");\r\n//     console.log(token);\r\n\r\n//     if (token) {\r\n//       config.headerss[\"Authorization\"] = token;\r\n//     }\r\n//     return config;\r\n//   });\r\n//   instance.interceptors.response.use((res) => {\r\n//     let token = localStorage.getItem(\"token\");\r\n//     if (token) {\r\n//       res.headers[\"Authorization\"] = token;\r\n//     }\r\n//     return res.data;\r\n//   });\r\n  return instance(config);\r\n}\r\n\r\nexport function request(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"/pc\",\r\n  });\r\n  instance.interceptors.request.use(\r\n    (config) => {\r\n      let token = localStorage.getItem(\"token\");\r\n      if (token) {\r\n        config.headers[\"x-Token\"] = token;\r\n      }\r\n      return config;\r\n    },\r\n    () => {}\r\n  );\r\n  instance.interceptors.response.use(\r\n    (res) => {\r\n      if (Object.keys(codeMessage).includes(`${res.data.code}`)) {\r\n        this.notifySuccess(codeMessage[res.data.code]);\r\n      }\r\n      return res;\r\n    },\r\n    (err) => {\r\n      console.log(err);\r\n      return err;\r\n    }\r\n  );\r\n  return instance(config);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,WAAW,GAAG;EAClB,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE,WAAW;EAChB,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,4BAA4B;EACjC,GAAG,EAAE;AACP,CAAC;AACD,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAE;EACrC,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACAF,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAAEC,GAAG,IAAK;IAC1C,IAAIA,GAAG,CAACC,IAAI,KAAK,GAAG,EAAE;MACpB,IAAI,CAACC,aAAa,CAACF,GAAG,CAACG,GAAG,CAAC;IAC7B;IACA,OAAOH,GAAG,CAACI,IAAI;EACjB,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACD,MAAM,CAAC;AACzB;AAEA,OAAO,SAASY,SAASA,CAACZ,MAAM,EAAE;EAChC,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;IAC5BC,OAAO,EAAE;EAEX,CAAC,CAAC;EACJ;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,OAAOF,QAAQ,CAACD,MAAM,CAAC;AACzB;AAEA,OAAO,SAASa,OAAOA,CAACb,MAAM,EAAE;EAC9B,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC,CAAC;EACFF,QAAQ,CAACG,YAAY,CAACS,OAAO,CAACP,GAAG,CAC9BN,MAAM,IAAK;IACV,IAAIc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAIF,KAAK,EAAE;MACTd,MAAM,CAACiB,OAAO,CAAC,SAAS,CAAC,GAAGH,KAAK;IACnC;IACA,OAAOd,MAAM;EACf,CAAC,EACD,MAAM,CAAC,CAAC,CACT;EACDC,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BC,GAAG,IAAK;IACP,IAAIW,MAAM,CAACC,IAAI,CAACrB,WAAW,CAAC,CAACsB,QAAQ,CAAE,GAAEb,GAAG,CAACI,IAAI,CAACH,IAAK,EAAC,CAAC,EAAE;MACzD,IAAI,CAACC,aAAa,CAACX,WAAW,CAACS,GAAG,CAACI,IAAI,CAACH,IAAI,CAAC,CAAC;IAChD;IACA,OAAOD,GAAG;EACZ,CAAC,EACAc,GAAG,IAAK;IACPC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB,OAAOA,GAAG;EACZ,CAAC,CACF;EACD,OAAOpB,QAAQ,CAACD,MAAM,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}