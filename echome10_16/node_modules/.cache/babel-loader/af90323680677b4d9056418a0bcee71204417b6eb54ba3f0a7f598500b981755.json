{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nexport default {\n  name: \"ListVue\",\n  components: {\n    breadCrumb\n  },\n  data() {\n    return {\n      chunkList: [],\n      pro: \"\",\n      files: null\n    };\n  },\n  mounted() {},\n  methods: {\n    parseFile(e) {\n      this.files = e.target.files[0]; //读取文件\n      //创建切片\n      console.log(this.files);\n      this.chunkList = this.createChunk(this.files);\n      console.log(this.chunkList);\n      //上传切片\n    },\n\n    createChunk(file, size = 2 * 2000 * 100) {\n      const chunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        chunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return chunkList;\n    },\n    //对每个切片进行数据处理\n    async uploadFile(list) {\n      const requestList = list.map(({\n        file,\n        fileName,\n        index,\n        chunkName\n      }) => {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"fileName\", fileName);\n        formData.append(\"index\", index);\n        formData.append(\"chunkName\", chunkName);\n        return {\n          formData,\n          index\n        };\n      }).map(({\n        formData,\n        index\n      } //注意这里如果加括号的话，一定要return出去，因为这是设置请求数组，返回的应该是一个promise组成的数组\n      ) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:400/upload\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: formData\n      }).then(res => {\n        console.log(res);\n        //显示每个切片上传的精度\n        this.pro = this.pro + `${list[index].chunkName}---${res.data.message}`;\n      }));\n      console.log(requestList);\n      await Promise.all(requestList);\n      let size = this.files.size;\n      let name = this.files.name;\n      console.log(size, name);\n      await this.mergeChunk(size, name);\n    },\n    upload() {\n      const uploadList = this.chunkList.map(({\n        file\n      }, index) => ({\n        //调用分片的函数\n        file,\n        size: file.size,\n        percent: 0,\n        chunkName: `${this.files.name}-${index}`,\n        fileName: this.files.name,\n        index\n      }));\n      this.uploadFile(uploadList);\n    },\n    async mergeChunk(size, fileName) {\n      let obj = {\n        size: size,\n        fileName: fileName\n      };\n      console.log(JSON.stringify(obj));\n      var raw = JSON.stringify({\n        \"size\": 1310390,\n        \"fileName\": \"结业证书.jpg\"\n      });\n      await axios.request({\n        method: \"post\",\n        url: \"http://localhost:400/merge\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: raw\n      }).then(res => {\n        console.log(res);\n      });\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","name","components","data","chunkList","pro","files","mounted","methods","parseFile","e","target","console","log","createChunk","file","size","cur","push","slice","uploadFile","list","requestList","map","fileName","index","chunkName","formData","FormData","append","request","method","url","header","then","res","message","Promise","all","mergeChunk","upload","uploadList","percent","obj","JSON","stringify","raw","headers"],"sources":["src/views/basic/fitment/list.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <bread-crumb></bread-crumb>\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upload\">上传</el-button>\r\n    <div id=\"progress\">{{ pro }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"ListVue\",\r\n  components: { breadCrumb },\r\n  data() {\r\n    return {\r\n      chunkList: [],\r\n      pro: \"\",\r\n      files: null,\r\n    };\r\n  },\r\n  mounted() {},\r\n  methods: {\r\n    parseFile(e) {\r\n      this.files = e.target.files[0]; //读取文件\r\n      //创建切片\r\n      console.log(this.files);\r\n      this.chunkList = this.createChunk(this.files);\r\n      console.log(this.chunkList);\r\n      //上传切片\r\n    },\r\n    createChunk(file, size = 2 * 2000 * 100) {\r\n      const chunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        chunkList.push({\r\n          file: file.slice(cur, cur + size),\r\n        });\r\n        cur += size;\r\n      }\r\n      return chunkList;\r\n    },\r\n\r\n    //对每个切片进行数据处理\r\n    async uploadFile(list) {\r\n      const requestList = list\r\n        .map(({ file, fileName, index, chunkName }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"file\", file);\r\n          formData.append(\"fileName\", fileName);\r\n          formData.append(\"index\", index);\r\n          formData.append(\"chunkName\", chunkName);\r\n          return { formData, index };\r\n        })\r\n        .map(\r\n          (\r\n            { formData, index } //注意这里如果加括号的话，一定要return出去，因为这是设置请求数组，返回的应该是一个promise组成的数组\r\n          ) =>\r\n            axios\r\n              .request({\r\n                method: \"post\",\r\n                url: \"http://localhost:400/upload\",\r\n                header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n                data: formData,\r\n              })\r\n              .then((res) => {\r\n                console.log(res);\r\n                //显示每个切片上传的精度\r\n                this.pro =\r\n                  this.pro + `${list[index].chunkName}---${res.data.message}`;\r\n              })\r\n        );\r\n      console.log(requestList);\r\n      await Promise.all(requestList);\r\n      let size = this.files.size;\r\n      let name = this.files.name;\r\n      console.log(size, name);\r\n      await this.mergeChunk(size, name);\r\n    },\r\n    upload() {\r\n      const uploadList = this.chunkList.map(({ file }, index) => ({\r\n        //调用分片的函数\r\n        file,\r\n        size: file.size,\r\n        percent: 0,\r\n        chunkName: `${this.files.name}-${index}`,\r\n        fileName: this.files.name,\r\n        index,\r\n      }));\r\n      this.uploadFile(uploadList);\r\n    },\r\n    async mergeChunk(size, fileName) {\r\n      let obj = { size: size, fileName: fileName };\r\n      console.log(JSON.stringify(obj));\r\n      var raw = JSON.stringify({\r\n        \"size\": 1310390,\r\n        \"fileName\": \"结业证书.jpg\",\r\n      });\r\n\r\n      await axios\r\n        .request({\r\n          method: \"post\",\r\n          url: \"http://localhost:400/merge\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: raw,\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}