{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nexport default {\n  name: \"ListVue\",\n  components: {\n    breadCrumb\n  },\n  data() {\n    return {\n      chunkList: []\n    };\n  },\n  mounted() {\n    this.upload();\n  },\n  methods: {\n    parseFile(e) {\n      const files = e.target.files[0]; //读取文件\n      //创建切片\n      console.log(files);\n      this.chunkList = this.createChunk(files);\n      console.log(this.chunkList);\n      //上传切片\n    },\n\n    createChunk(file, size = 2 * 2000 * 100) {\n      const chunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        chunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return chunkList;\n    },\n    //对每个切片进行数据处理\n    async uploadFile(list) {\n      const requestList = list.map(({\n        file,\n        fileName,\n        index,\n        chunkName\n      }) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('fileName', fileName);\n        formData.append('index', index);\n        formData.append('chunkName', chunkName);\n      }).map(({\n        formData,\n        index\n      }) => {\n        axios.request({\n          method: \"post\",\n          url: \"http://localhost:400/upload\"\n        });\n      });\n    },\n    upload() {\n      axios.request({\n        method: \"post\",\n        url: \"http://localhost:400/upload\"\n      }).then(res => {\n        console.log(res);\n      });\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","name","components","data","chunkList","mounted","upload","methods","parseFile","e","files","target","console","log","createChunk","file","size","cur","push","slice","uploadFile","list","requestList","map","fileName","index","chunkName","formData","FormData","append","request","method","url","then","res"],"sources":["src/views/basic/fitment/list.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <bread-crumb></bread-crumb>\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button>上传</el-button>\r\n    <div id=\"progress\">progress</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"ListVue\",\r\n  components: { breadCrumb },\r\n  data() {\r\n    return {\r\n      chunkList: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.upload();\r\n  },\r\n  methods: {\r\n    parseFile(e) {\r\n      const files = e.target.files[0]; //读取文件\r\n      //创建切片\r\n      console.log(files);\r\n      this.chunkList = this.createChunk(files);\r\n      console.log(this.chunkList);\r\n      //上传切片\r\n    },\r\n    createChunk(file, size = 2 * 2000 * 100) {\r\n      const chunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        chunkList.push({\r\n          file: file.slice(cur, cur + size),\r\n        });\r\n        cur += size;\r\n      }\r\n      return chunkList;\r\n    },\r\n\t//对每个切片进行数据处理\r\n\tasync uploadFile(list){\r\n\t\tconst requestList=list.map(({file,fileName,index,chunkName})=>{\r\n\t\t\tconst formData=new FormData()\r\n\t\t\tformData.append('file',file)\r\n\t\t\tformData.append('fileName',fileName)\r\n\t\t\tformData.append('index',index)\r\n\t\t\tformData.append('chunkName',chunkName)\r\n\t\t}).map(({formData,index})=>{\r\n\t\t\taxios.request({\r\n\t\t\t\tmethod: \"post\",\r\n          url: \"http://localhost:400/upload\",\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n    upload() {\r\n      axios\r\n        .request({\r\n          method: \"post\",\r\n          url: \"http://localhost:400/upload\",\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";AAUA,OAAAA,UAAA;AACA,OAAAC,KAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAH;EAAA;EACAI,KAAA;IACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,MAAA;EACA;EACAC,OAAA;IACAC,UAAAC,CAAA;MACA,MAAAC,KAAA,GAAAD,CAAA,CAAAE,MAAA,CAAAD,KAAA;MACA;MACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;MACA,KAAAN,SAAA,QAAAU,WAAA,CAAAJ,KAAA;MACAE,OAAA,CAAAC,GAAA,MAAAT,SAAA;MACA;IACA;;IACAU,YAAAC,IAAA,EAAAC,IAAA;MACA,MAAAZ,SAAA;MACA,IAAAa,GAAA;MACA,OAAAA,GAAA,GAAAF,IAAA,CAAAC,IAAA;QACAZ,SAAA,CAAAc,IAAA;UACAH,IAAA,EAAAA,IAAA,CAAAI,KAAA,CAAAF,GAAA,EAAAA,GAAA,GAAAD,IAAA;QACA;QACAC,GAAA,IAAAD,IAAA;MACA;MACA,OAAAZ,SAAA;IACA;IACA;IACA,MAAAgB,WAAAC,IAAA;MACA,MAAAC,WAAA,GAAAD,IAAA,CAAAE,GAAA;QAAAR,IAAA;QAAAS,QAAA;QAAAC,KAAA;QAAAC;MAAA;QACA,MAAAC,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,MAAA,SAAAd,IAAA;QACAY,QAAA,CAAAE,MAAA,aAAAL,QAAA;QACAG,QAAA,CAAAE,MAAA,UAAAJ,KAAA;QACAE,QAAA,CAAAE,MAAA,cAAAH,SAAA;MACA,GAAAH,GAAA;QAAAI,QAAA;QAAAF;MAAA;QACAzB,KAAA,CAAA8B,OAAA;UACAC,MAAA;UACAC,GAAA;QACA;MACA;IACA;IACA1B,OAAA;MACAN,KAAA,CACA8B,OAAA;QACAC,MAAA;QACAC,GAAA;MACA,GACAC,IAAA,CAAAC,GAAA;QACAtB,OAAA,CAAAC,GAAA,CAAAqB,GAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}