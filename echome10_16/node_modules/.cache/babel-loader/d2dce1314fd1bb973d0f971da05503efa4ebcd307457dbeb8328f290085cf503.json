{"ast":null,"code":"import axios from \"axios\";\nimport router from \"../router/index\";\nconst codeMessage = {\n  200: \"服务器成功返回请求的数据\",\n  201: \"新建或修改数据成功\",\n  204: \"删除数据成功\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作\",\n  401: \"用户没有访问权限（令牌、用户名、密码错误）\"\n};\n//登录注册时候的axios封装\nexport function mylocalrequest(config) {\n  const instance = axios.create({\n    baseURL: \"http://127.0.0.1:300/pc\"\n  });\n  //响应拦截器\n  instance.interceptors.response.use(res => {\n    console.log(res);\n    if (res.data.code === 200) {\n      console.log(res);\n      localStorage.setItem(\"refreshToken\", res.data.data.refreshToken);\n      this.notifySuccess(res.msg);\n    }\n    return res.data;\n  });\n  return instance(config);\n}\nexport function myrequest(config) {\n  const instance = axios.create({\n    baseURL: \"http://127.0.0.1:300/pc\"\n  });\n  const clearAuth = () => {\n    console.log(\"身份过期，请重新登录\");\n    window.location.replace(\"/user/login\");\n    localStorage.clear();\n  };\n  instance.interceptors.request.use(config => {\n    let token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"Authorization\"] = token;\n    }\n    return config;\n  });\n  instance.interceptors.response.use(res => {\n    //在2xx范围内的任何状态码都会触发此函数，主要用于处理响应数据\n    return res.data;\n  }, err => {\n    //任何超出2xx范围内的状态码都会触发此函数，主要用于处理响应错误\n    let {\n      status\n    } = err.response;\n    if (status === 401) {\n      //表示未授权\n      console.log(err.response.data);\n      if (err.response.data.msg === \"invalid token\")\n        //token无效\n        clearAuth();\n    } else if (err.response.data.error == \"jwt expired\") {\n      //token过期\n      console.log(3);\n    }\n    return Promise.reject(err); //将未处理的异常往外抛\n  });\n\n  return instance(config);\n}\nexport function request(config) {\n  const instance = axios.create({\n    baseURL: \"/pc\"\n  });\n  instance.interceptors.response.use(res => {\n    if (Object.keys(codeMessage).includes(`${res.data.code}`)) {\n      this.notifySuccess(codeMessage[res.data.code]);\n    }\n    return res;\n  }, err => {\n    return err;\n  });\n  return instance(config);\n}","map":{"version":3,"names":["axios","router","codeMessage","mylocalrequest","config","instance","create","baseURL","interceptors","response","use","res","console","log","data","code","localStorage","setItem","refreshToken","notifySuccess","msg","myrequest","clearAuth","window","location","replace","clear","request","token","getItem","headers","err","status","error","Promise","reject","Object","keys","includes"],"sources":["D:/前端/e家项目仿照/echome3_16/echome3_16/src/network/config.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"../router/index\";\r\nconst codeMessage = {\r\n  200: \"服务器成功返回请求的数据\",\r\n  201: \"新建或修改数据成功\",\r\n  204: \"删除数据成功\",\r\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作\",\r\n  401: \"用户没有访问权限（令牌、用户名、密码错误）\",\r\n};\r\n//登录注册时候的axios封装\r\nexport function mylocalrequest(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:300/pc\",\r\n  });\r\n  //响应拦截器\r\n  instance.interceptors.response.use((res) => {\r\n    console.log(res);\r\n    if (res.data.code === 200) {\r\n      console.log(res);\r\n      localStorage.setItem(\"refreshToken\", res.data.data.refreshToken);\r\n      this.notifySuccess(res.msg);\r\n    }\r\n    return res.data;\r\n  });\r\n  return instance(config);\r\n}\r\n\r\nexport function myrequest(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:300/pc\",\r\n  });\r\n\r\n  const clearAuth = () => {\r\n    console.log(\"身份过期，请重新登录\");\r\n    window.location.replace(\"/user/login\");\r\n    localStorage.clear();\r\n  };\r\n  instance.interceptors.request.use((config) => {\r\n    let token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = token;\r\n    }\r\n    return config;\r\n  });\r\n  instance.interceptors.response.use(\r\n    (res) => {\r\n      //在2xx范围内的任何状态码都会触发此函数，主要用于处理响应数据\r\n      return res.data;\r\n    },\r\n    (err) => {\r\n      //任何超出2xx范围内的状态码都会触发此函数，主要用于处理响应错误\r\n      let { status } = err.response;\r\n      if (status === 401) {\r\n        //表示未授权\r\n        console.log(err.response.data);\r\n        if (err.response.data.msg === \"invalid token\")\r\n          //token无效\r\n          clearAuth();\r\n      } else if (err.response.data.error == \"jwt expired\") {\r\n        //token过期\r\n        console.log(3);\r\n      }\r\n\r\n      return Promise.reject(err);//将未处理的异常往外抛\r\n    }\r\n  );\r\n  return instance(config);\r\n}\r\n\r\nexport function request(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"/pc\",\r\n  });\r\n\r\n  instance.interceptors.response.use(\r\n    (res) => {\r\n      if (Object.keys(codeMessage).includes(`${res.data.code}`)) {\r\n        this.notifySuccess(codeMessage[res.data.code]);\r\n      }\r\n      return res;\r\n    },\r\n    (err) => {\r\n      return err;\r\n    }\r\n  );\r\n  return instance(config);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}