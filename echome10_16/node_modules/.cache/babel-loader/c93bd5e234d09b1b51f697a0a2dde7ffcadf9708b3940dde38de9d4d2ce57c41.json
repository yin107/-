{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport tableStep2 from \"./components/tableStep2.vue\";\nimport dataCreateSuc from \"components/dataCreateSuc.vue\";\nimport { mixins } from \"@/minxin\";\nimport DataCreateSuc from \"../../../components/dataCreateSuc.vue\";\nexport default {\n  components: {\n    breadCrumb,\n    tableStep2,\n    dataCreateSuc,\n    DataCreateSuc\n  },\n  mixins: [mixins],\n  data() {\n    return {\n      file: null,\n      errorData: [],\n      rightData: [],\n      step: 1,\n      chunkList: [],\n      tableHead2: [{\n        prop: \"detail\",\n        label: \"详细\"\n      }, {\n        prop: \"construction_area\",\n        label: \"建筑面积\"\n      }, {\n        prop: \"name\",\n        label: \"业主姓名\"\n      }, {\n        prop: \"idcard\",\n        label: \"业主身份证号\"\n      }, {\n        prop: \"phone\",\n        label: \"业主电话号码\"\n      }]\n    };\n  },\n  mounted() {},\n  computed: {\n    tableHead3() {\n      let res = [];\n      res.push(...this.tableHead2);\n      res.push({\n        prop: \"error\",\n        label: \"错误原因\"\n      });\n      return res;\n    }\n  },\n  methods: {\n    parseFile(file) {\n      this.file = file;\n      console.log(this.file);\n      return false;\n    },\n    //上传文件切片\n    async uploadChunks(prop = \"\", nameHash = \"\", fileName = \"\") {\n      // 数据处理\n      const requestList = this.chunkList.map((file, index) => {\n        const formdata = new FormData();\n        formdata.append(\"file\", file.file);\n        formdata.append(\"index\", index);\n        formdata.append(\"hash\", prop);\n        formdata.append(\"nameHash\", nameHash);\n        formdata.append(\"filename\", fileName);\n        return {\n          formdata\n        };\n      }).map(({\n        formdata\n      }) => {\n        //并发请求\n        this.$myrequest({\n          url: \"/building/chunk\",\n          method: \"post\",\n          data: formdata\n        });\n      });\n      //并发请求\n      await Promise.all(requestList);\n    },\n    //  上传文件、给后端进行解析\n    async upFileParse() {\n      if (!this.file) {\n        this.notifyError(\"请选择文件\");\n      } else {\n        const fileChunkList = this.createChunk(this.file);\n        this.chunkList = fileChunkList.map(({\n          file\n        }, index) => ({\n          chunk: file,\n          hash: this.file.name + \"-\" + index\n        }));\n        await this.uploadChunks();\n        //合并切片\n        await this.mergeRequest();\n      }\n    },\n    async mergeRequest() {\n      await this.$request({\n        url: \"/building/parse\",\n        method: \"post\",\n        data: JSON.stringify({\n          filename: this.file.name\n        })\n      }).then(res => {\n        this.rightData = res.data.data.rightData;\n        this.errorData = res.data.data.errorData;\n        this.step++;\n      });\n    },\n    gotoList() {\n      this.step = 1;\n      this.file = null;\n      this.rightData = [];\n      this.errorData = [];\n      this.$router.push({\n        name: \"building\"\n      });\n    },\n    //获取全部数据\n    getTotalData() {\n      this.$request({\n        url: \"/building/parse\",\n        method: \"post\",\n        data: {\n          id: this.file.uid\n        }\n      }).then(res => {\n        this.rightData = res.data.data.rightData;\n        this.errorData = res.data.data.errorData;\n        this.step++;\n        this.file = null;\n      });\n    },\n    //文件切片\n    createChunk(file, size = 10 * 1024) {\n      const chunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        chunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return chunkList;\n    },\n    //将正确的数据提交到后端\n    gotoStep3() {\n      this.$request({\n        url: \"/building/import\",\n        method: \"post\",\n        data: {\n          community_id: this.community_id,\n          buildings: this.rightData\n        }\n      }).then(() => {\n        this.step++;\n      });\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","tableStep2","dataCreateSuc","mixins","DataCreateSuc","components","data","file","errorData","rightData","step","chunkList","tableHead2","prop","label","mounted","computed","tableHead3","res","push","methods","parseFile","console","log","uploadChunks","nameHash","fileName","requestList","map","index","formdata","FormData","append","$myrequest","url","method","Promise","all","upFileParse","notifyError","fileChunkList","createChunk","chunk","hash","name","mergeRequest","$request","JSON","stringify","filename","then","gotoList","$router","getTotalData","id","uid","size","cur","slice","gotoStep3","community_id","buildings"],"sources":["src/views/basic/bulding/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <bread-crumb>\r\n      <span\r\n        slot=\"goback\"\r\n        style=\"float: right\"\r\n        @click=\"$router.go(-1)\"\r\n        class=\"doaction\"\r\n      >\r\n        返回</span\r\n      ></bread-crumb\r\n    >\r\n\r\n    <el-card style=\"margin-top: 20px\">\r\n      <!-- 步骤 -->\r\n      <el-steps :active=\"step\" align-center>\r\n        <el-step title=\"上传数据\" description=\"上传房产数据\"></el-step>\r\n        <el-step title=\"数据验证\" description=\"验证数据是否正确\"></el-step>\r\n        <el-step title=\"导入成功\" description=\"房产数据导入成功\"></el-step>\r\n      </el-steps>\r\n      <div v-if=\"step == 1\">\r\n        <!-- 上传 -->\r\n        <el-upload\r\n          class=\"upload-demo\"\r\n          drag\r\n          action=\"/\"\r\n          accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n          :before-upload=\"parseFile\"\r\n        >\r\n          <i class=\"el-icon-upload\"></i>\r\n\r\n          <div class=\"el-upload-text\">\r\n            <p v-if=\"file\">已选择：{{ file.name }}</p>\r\n            点击或拖拽访固定资产导入文件到此处，导入住在、商户数量受许可限制\r\n          </div>\r\n        </el-upload>\r\n        <el-button type=\"primary\" @click=\"upFileParse\">下一步</el-button>\r\n      </div>\r\n\r\n      <div v-if=\"step == 2\">\r\n        <table-step2 :tableData=\"rightData\" :tableHead=\"tableHead2\">\r\n          <p slot=\"title\" style=\"text-align: left\">\r\n            可导入数据{{ rightData.length }}条\r\n          </p>\r\n        </table-step2>\r\n\r\n        <table-step2 :tableData=\"errorData\" :tableHead=\"tableHead3\">\r\n          <p slot=\"title\" style=\"text-align: left\">\r\n            不可导入数据{{ errorData.length }}条\r\n          </p>\r\n        </table-step2>\r\n\r\n        <el-button @click=\"step--\"> 上一步</el-button>\r\n        <el-button type=\"primary\" @click=\"gotoStep3\">下一步</el-button>\r\n      </div>\r\n\r\n      <div v-if=\"step == 3\">\r\n        <data-create-suc>\r\n          <div slot=\"suce-info\">数据导入成功</div>\r\n          <div slot=\"mention-info\">本次共导入{{ rightData.length }}条数据</div>\r\n        </data-create-suc>\r\n        <el-button @click=\"step = 1\">继续导入</el-button>\r\n        <el-button @click=\"gotoList\" type=\"primary\">查看房产</el-button>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport tableStep2 from \"./components/tableStep2.vue\";\r\nimport dataCreateSuc from \"components/dataCreateSuc.vue\";\r\nimport { mixins } from \"@/minxin\";\r\nimport DataCreateSuc from \"../../../components/dataCreateSuc.vue\";\r\nexport default {\r\n  components: { breadCrumb, tableStep2, dataCreateSuc, DataCreateSuc },\r\n  mixins: [mixins],\r\n  data() {\r\n    return {\r\n      file: null,\r\n      errorData: [],\r\n      rightData: [],\r\n      step: 1,\r\n      chunkList: [],\r\n      tableHead2: [\r\n        { prop: \"detail\", label: \"详细\" },\r\n        { prop: \"construction_area\", label: \"建筑面积\" },\r\n        { prop: \"name\", label: \"业主姓名\" },\r\n        { prop: \"idcard\", label: \"业主身份证号\" },\r\n        { prop: \"phone\", label: \"业主电话号码\" },\r\n      ],\r\n    };\r\n  },\r\n  mounted() {},\r\n  computed: {\r\n    tableHead3() {\r\n      let res = [];\r\n      res.push(...this.tableHead2);\r\n      res.push({ prop: \"error\", label: \"错误原因\" });\r\n      return res;\r\n    },\r\n  },\r\n  methods: {\r\n    parseFile(file) {\r\n      this.file = file;\r\n      console.log(this.file);\r\n      return false;\r\n    },\r\n    //上传文件切片\r\n    async uploadChunks(\r\n      prop = \"\",\r\n      nameHash = \"\",\r\n      fileName = \"\",\r\n    ) {\r\n      // 数据处理\r\n      const requestList = this.chunkList\r\n        .map((file, index) => {\r\n          const formdata = new FormData();\r\n          formdata.append(\"file\", file.file);\r\n          formdata.append(\"index\", index);\r\n          formdata.append(\"hash\", prop);\r\n          formdata.append(\"nameHash\", nameHash);\r\n          formdata.append(\"filename\", fileName);\r\n          return { formdata };\r\n        })\r\n        .map(({ formdata }) => {\r\n          //并发请求\r\n          this.$myrequest({\r\n            url: \"/building/chunk\",\r\n            method: \"post\",\r\n            data: formdata,\r\n          });\r\n        });\r\n      //并发请求\r\n      await Promise.all(requestList);\r\n    },\r\n    //  上传文件、给后端进行解析\r\n    async upFileParse() {\r\n      if (!this.file) {\r\n        this.notifyError(\"请选择文件\");\r\n      } else {\r\n        const fileChunkList = this.createChunk(this.file);\r\n        this.chunkList = fileChunkList.map(({ file }, index) => ({\r\n          chunk: file,\r\n          hash: this.file.name + \"-\" + index,\r\n        }));\r\n        await this.uploadChunks();\r\n        //合并切片\r\n        await this.mergeRequest();\r\n      }\r\n    },\r\n    async mergeRequest() {\r\n      await this.$request({\r\n        url: \"/building/parse\",\r\n        method: \"post\",\r\n        data: JSON.stringify({ filename: this.file.name }),\r\n      }).then((res) => {\r\n        this.rightData = res.data.data.rightData;\r\n        this.errorData = res.data.data.errorData;\r\n        this.step++;\r\n      });\r\n    },\r\n    gotoList() {\r\n      this.step = 1;\r\n      this.file = null;\r\n      this.rightData = [];\r\n      this.errorData = [];\r\n      this.$router.push({ name: \"building\" });\r\n    },\r\n    //获取全部数据\r\n    getTotalData() {\r\n      this.$request({\r\n        url: \"/building/parse\",\r\n        method: \"post\",\r\n        data: {\r\n          id: this.file.uid,\r\n        },\r\n      }).then((res) => {\r\n        this.rightData = res.data.data.rightData;\r\n        this.errorData = res.data.data.errorData;\r\n        this.step++;\r\n        this.file = null;\r\n      });\r\n    },\r\n    //文件切片\r\n    createChunk(file, size = 10 * 1024) {\r\n      const chunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        chunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return chunkList;\r\n    },\r\n    //将正确的数据提交到后端\r\n    gotoStep3() {\r\n      this.$request({\r\n        url: \"/building/import\",\r\n        method: \"post\",\r\n        data: {\r\n          community_id: this.community_id,\r\n          buildings: this.rightData,\r\n        },\r\n      }).then(() => {\r\n        this.step++;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.upload-demo {\r\n  width: 80%;\r\n  margin: 20px auto;\r\n  height: auto;\r\n}\r\n</style>\r\n<style>\r\n.upload-demo .el-upload .el-upload-dragger {\r\n  height: auto;\r\n  width: 600px;\r\n  padding-bottom: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}