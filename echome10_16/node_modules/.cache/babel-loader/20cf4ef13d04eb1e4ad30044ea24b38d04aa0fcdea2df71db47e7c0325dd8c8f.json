{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport tableStep2 from \"./components/tableStep2.vue\";\nexport default {\n  components: {\n    breadCrumb,\n    tableStep2\n  },\n  data() {\n    return {\n      file: null,\n      errorData: [],\n      rightData: [],\n      step: 2,\n      chunkList: [],\n      tableHead2: [{\n        prop: \"detail\",\n        label: \"详细\"\n      }, {\n        prop: \"construction_area\",\n        label: \"建筑面积\"\n      }, {\n        prop: \"name\",\n        label: \"业主姓名\"\n      }, {\n        prop: \"idcard\",\n        label: \"业主身份证号\"\n      }, {\n        prop: \"phone\",\n        label: \"业主电话号码\"\n      }]\n    };\n  },\n  mounted() {\n    console.log(...this.tableHead2);\n  },\n  computed: {\n    tableHead3() {\n      return [...this.tableHead2];\n    }\n  },\n  methods: {\n    parseFile(file) {\n      this.file = file; //文件里面本身就有一个uid\n      this.chunkList = this.createChunk(this.file);\n      return false;\n    },\n    //  上传文件、给后端进行解析\n    async upFileParse() {\n      if (!this.file) {\n        this.notifyError(\"请选择文件\");\n      } else {\n        // 数据处理\n        const uploadList = this.chunkList.map(({\n          file\n        }, index) => ({\n          file,\n          size: file.size,\n          percent: 0,\n          chunkName: `${this.file.name}-${index}`,\n          fileName: this.file.name,\n          index\n        }));\n        const requestList = uploadList.map(({\n          file,\n          fileName,\n          index,\n          chunkName\n        }) => {\n          const formData = new FormData();\n          formData.append(\"file\", file);\n          formData.append(\"fileName\", fileName);\n          formData.append(\"chunkName\", chunkName);\n          return {\n            formData,\n            index\n          };\n        }).map(({\n          formData\n        }) => {\n          return new Promise(resolve => {\n            //并发请求\n            this.$request({\n              url: \"/building/chunk\",\n              method: \"post\",\n              data: formData\n            }).then(res => {\n              resolve(res); //需要返回一个状态码\n            });\n          });\n        });\n\n        await Promise.all(requestList).then(res => {\n          //如果res是一个数组，如果每一项都是200，就说明每一个分片都上传成功\n          let istrue = res.every(item => item.data.code === 200);\n          // 所有的切片都上传成功之后，在向后端发送请求\n          if (istrue) {\n            this.getTotalData();\n          }\n        });\n      }\n    },\n    //获取全部数据\n    getTotalData() {\n      this.$request({\n        url: \"/building/parse\",\n        method: \"post\",\n        data: {\n          id: this.file.uid\n        }\n      }).then(res => {\n        this.rightData = res.data.data.rightData;\n        this.errorData = res.data.data.errorData;\n        this.step++;\n        this.file = null;\n      });\n    },\n    //文件切片\n    createChunk(file, size = 10 * 1024) {\n      const chunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        chunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return chunkList;\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","tableStep2","components","data","file","errorData","rightData","step","chunkList","tableHead2","prop","label","mounted","console","log","computed","tableHead3","methods","parseFile","createChunk","upFileParse","notifyError","uploadList","map","index","size","percent","chunkName","name","fileName","requestList","formData","FormData","append","Promise","resolve","$request","url","method","then","res","all","istrue","every","item","code","getTotalData","id","uid","cur","push","slice"],"sources":["src/views/basic/bulding/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <bread-crumb></bread-crumb>\r\n\r\n    <el-card style=\"margin-top: 20px\">\r\n      <!-- 步骤 -->\r\n      <el-steps :active=\"step\" align-center>\r\n        <el-step title=\"上传数据\" description=\"上传房产数据\"></el-step>\r\n        <el-step title=\"数据验证\" description=\"验证数据是否正确\"></el-step>\r\n        <el-step title=\"导入成功\" description=\"房产数据导入成功\"></el-step>\r\n      </el-steps>\r\n      <div v-if=\"step == 1\">\r\n        <!-- 上传 -->\r\n        <el-upload\r\n          class=\"upload-demo\"\r\n          drag\r\n          action=\"/\"\r\n          accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n          :before-upload=\"parseFile\"\r\n        >\r\n          <i class=\"el-icon-upload\"></i>\r\n\r\n          <div class=\"el-upload-text\">\r\n            <p v-if=\"file\">已选择：{{ file.name }}</p>\r\n            点击或拖拽访固定资产导入文件到此处，导入住在、商户数量受许可限制\r\n          </div>\r\n        </el-upload>\r\n        <el-button type=\"primary\" @click=\"upFileParse\">下一步</el-button>\r\n      </div>\r\n\r\n      <div v-if=\"step == 2\">\r\n        <table-step2 :tableData=\"rightData\" :tableHead=\"tableHead2\">\r\n          <p slot=\"title\" style=\"text-align: left\">\r\n            可导入数据{{ rightData.length }}条\r\n          </p>\r\n        </table-step2>\r\n\r\n        <table-step2 :tableData=\"errorData\" :tableHead=\"tableHead2\">\r\n          <p slot=\"title\" style=\"text-align: left\">\r\n            不可导入数据{{ errorData.length }}条\r\n          </p>\r\n        </table-step2>\r\n\r\n        <el-button @click=\"step--\"> 上一步</el-button>\r\n        <el-button type=\"primary\">下一步</el-button>\r\n      </div>\r\n\r\n      <div v-if=\"step == 3\">23</div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport tableStep2 from \"./components/tableStep2.vue\";\r\nexport default {\r\n  components: { breadCrumb, tableStep2 },\r\n  data() {\r\n    return {\r\n      file: null,\r\n      errorData: [],\r\n      rightData: [],\r\n      step: 2,\r\n      chunkList: [],\r\n      tableHead2: [\r\n        { prop: \"detail\", label: \"详细\" },\r\n        { prop: \"construction_area\", label: \"建筑面积\" },\r\n        { prop: \"name\", label: \"业主姓名\" },\r\n        { prop: \"idcard\", label: \"业主身份证号\" },\r\n        { prop: \"phone\", label: \"业主电话号码\" },\r\n      ],\r\n    };\r\n  },\r\n  mounted(){\r\nconsole.log(...this.tableHead2);\r\n  },\r\n  computed:{\r\ntableHead3(){\r\n\treturn [...this.tableHead2]\r\n}\r\n  },\r\n  methods: {\r\n    parseFile(file) {\r\n      this.file = file; //文件里面本身就有一个uid\r\n      this.chunkList = this.createChunk(this.file);\r\n      return false;\r\n    },\r\n    //  上传文件、给后端进行解析\r\n    async upFileParse() {\r\n      if (!this.file) {\r\n        this.notifyError(\"请选择文件\");\r\n      } else {\r\n        // 数据处理\r\n        const uploadList = this.chunkList.map(({ file }, index) => ({\r\n          file,\r\n          size: file.size,\r\n          percent: 0,\r\n          chunkName: `${this.file.name}-${index}`,\r\n          fileName: this.file.name,\r\n          index,\r\n        }));\r\n        const requestList = uploadList\r\n          .map(({ file, fileName, index, chunkName }) => {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            formData.append(\"fileName\", fileName);\r\n            formData.append(\"chunkName\", chunkName);\r\n            return { formData, index };\r\n          })\r\n          .map(({ formData }) => {\r\n            return new Promise((resolve) => {\r\n              //并发请求\r\n              this.$request({\r\n                url: \"/building/chunk\",\r\n                method: \"post\",\r\n                data: formData,\r\n              }).then((res) => {\r\n                resolve(res); //需要返回一个状态码\r\n              });\r\n            });\r\n          });\r\n\r\n        await Promise.all(requestList).then((res) => {\r\n          //如果res是一个数组，如果每一项都是200，就说明每一个分片都上传成功\r\n          let istrue = res.every((item) => item.data.code === 200);\r\n          // 所有的切片都上传成功之后，在向后端发送请求\r\n          if (istrue) {\r\n            this.getTotalData();\r\n          }\r\n        });\r\n      }\r\n    },\r\n    //获取全部数据\r\n    getTotalData() {\r\n      this.$request({\r\n        url: \"/building/parse\",\r\n        method: \"post\",\r\n        data: {\r\n          id: this.file.uid,\r\n        },\r\n      }).then((res) => {\r\n        this.rightData = res.data.data.rightData;\r\n        this.errorData = res.data.data.errorData;\r\n        this.step++;\r\n        this.file = null;\r\n      });\r\n    },\r\n    //文件切片\r\n    createChunk(file, size = 10 * 1024) {\r\n      const chunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        chunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return chunkList;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.upload-demo {\r\n  width: 80%;\r\n  margin: 20px auto;\r\n  height: auto;\r\n}\r\n</style>\r\n<style>\r\n.upload-demo .el-upload .el-upload-dragger {\r\n  height: auto;\r\n  width: 600px;\r\n  padding-bottom: 20px;\r\n}\r\n</style>\r\n"],"mappings":";AAqDA,OAAAA,UAAA;AACA,OAAAC,UAAA;AACA;EACAC,UAAA;IAAAF,UAAA;IAAAC;EAAA;EACAE,KAAA;IACA;MACAC,IAAA;MACAC,SAAA;MACAC,SAAA;MACAC,IAAA;MACAC,SAAA;MACAC,UAAA,GACA;QAAAC,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EACAC,QAAA;IACAC,OAAA,CAAAC,GAAA,SAAAL,UAAA;EACA;EACAM,QAAA;IACAC,WAAA;MACA,gBAAAP,UAAA;IACA;EACA;EACAQ,OAAA;IACAC,UAAAd,IAAA;MACA,KAAAA,IAAA,GAAAA,IAAA;MACA,KAAAI,SAAA,QAAAW,WAAA,MAAAf,IAAA;MACA;IACA;IACA;IACA,MAAAgB,YAAA;MACA,UAAAhB,IAAA;QACA,KAAAiB,WAAA;MACA;QACA;QACA,MAAAC,UAAA,QAAAd,SAAA,CAAAe,GAAA;UAAAnB;QAAA,GAAAoB,KAAA;UACApB,IAAA;UACAqB,IAAA,EAAArB,IAAA,CAAAqB,IAAA;UACAC,OAAA;UACAC,SAAA,UAAAvB,IAAA,CAAAwB,IAAA,IAAAJ,KAAA;UACAK,QAAA,OAAAzB,IAAA,CAAAwB,IAAA;UACAJ;QACA;QACA,MAAAM,WAAA,GAAAR,UAAA,CACAC,GAAA;UAAAnB,IAAA;UAAAyB,QAAA;UAAAL,KAAA;UAAAG;QAAA;UACA,MAAAI,QAAA,OAAAC,QAAA;UACAD,QAAA,CAAAE,MAAA,SAAA7B,IAAA;UACA2B,QAAA,CAAAE,MAAA,aAAAJ,QAAA;UACAE,QAAA,CAAAE,MAAA,cAAAN,SAAA;UACA;YAAAI,QAAA;YAAAP;UAAA;QACA,GACAD,GAAA;UAAAQ;QAAA;UACA,WAAAG,OAAA,CAAAC,OAAA;YACA;YACA,KAAAC,QAAA;cACAC,GAAA;cACAC,MAAA;cACAnC,IAAA,EAAA4B;YACA,GAAAQ,IAAA,CAAAC,GAAA;cACAL,OAAA,CAAAK,GAAA;YACA;UACA;QACA;;QAEA,MAAAN,OAAA,CAAAO,GAAA,CAAAX,WAAA,EAAAS,IAAA,CAAAC,GAAA;UACA;UACA,IAAAE,MAAA,GAAAF,GAAA,CAAAG,KAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAzC,IAAA,CAAA0C,IAAA;UACA;UACA,IAAAH,MAAA;YACA,KAAAI,YAAA;UACA;QACA;MACA;IACA;IACA;IACAA,aAAA;MACA,KAAAV,QAAA;QACAC,GAAA;QACAC,MAAA;QACAnC,IAAA;UACA4C,EAAA,OAAA3C,IAAA,CAAA4C;QACA;MACA,GAAAT,IAAA,CAAAC,GAAA;QACA,KAAAlC,SAAA,GAAAkC,GAAA,CAAArC,IAAA,CAAAA,IAAA,CAAAG,SAAA;QACA,KAAAD,SAAA,GAAAmC,GAAA,CAAArC,IAAA,CAAAA,IAAA,CAAAE,SAAA;QACA,KAAAE,IAAA;QACA,KAAAH,IAAA;MACA;IACA;IACA;IACAe,YAAAf,IAAA,EAAAqB,IAAA;MACA,MAAAjB,SAAA;MACA,IAAAyC,GAAA;MACA,OAAAA,GAAA,GAAA7C,IAAA,CAAAqB,IAAA;QACAjB,SAAA,CAAA0C,IAAA;UAAA9C,IAAA,EAAAA,IAAA,CAAA+C,KAAA,CAAAF,GAAA,EAAAA,GAAA,GAAAxB,IAAA;QAAA;QACAwB,GAAA,IAAAxB,IAAA;MACA;MACA,OAAAjB,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}