{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst SIZE = 10 * 1024 * 2;\nconst Status = {\n  wait: \"wait\",\n  pause: \"pause\",\n  uploading: \"uploading\"\n};\nconst CancelToken = axios.CancelToken;\nlet source = CancelToken.source();\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0));\n    }\n  },\n  computed: {\n    uploadPercentage() {\n      if (!this.container.file || !this.data.length) return 0;\n      const loaded = this.data.map(item => item.size * item.percentage).reduce((acc, cur) => acc + cur);\n      return parseInt((loaded / this.container.file.size).toFixed(2));\n    }\n  },\n  data() {\n    return {\n      Status,\n      status: Status.wait,\n      container: {\n        file: null,\n        hash: \"\",\n        worker: null\n      },\n      requestList: [],\n      hashPercentage: 0,\n      data: [] //保存切片文件数组\n    };\n  },\n\n  methods: {\n    //生成文件hash\n    calculateHash(fileChunkList) {\n      return new Promise(resolve => {\n        this.container.worker = new Worker(\"/hash.js\");\n        this.container.worker.postMessage({\n          fileChunkList\n        });\n        this.container.worker.onmessage = e => {\n          const {\n            percentage,\n            hash\n          } = e.data;\n          this.hashPercentage = percentage;\n          if (hash) {\n            resolve(hash);\n          }\n        };\n      });\n    },\n    parseFile(e) {\n      // source.cancel(\"终断上传\");\n      //source = CancelToken.source();\n      this.container.file = e.target.files[0];\n    },\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\n    async verifyUpload(filename, fileHash) {\n      const {\n        data\n      } = await axios.request({\n        url: \"http://localhost:401/verify\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename,\n          fileHash\n        })\n      });\n      console.log(data);\n      return data; //不需要使用JSON.parse(data),axios内部已经做了转换\n    },\n\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks(uploadedList = []) {\n      const requestList = this.data.filter(({\n        hash\n      }) => !uploadedList.includes(hash)).map(({\n        chunk,\n        hash,\n        index\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"fileHash\", this.container.hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData,\n          index\n        }; //一定要加括号\n      }).map(({\n        formData,\n        index\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:401\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        onUploadProgress: this.uploadProgressEvent(this.data[index]),\n        cancelToken: source.token,\n        data: formData\n      }).then(res => {\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n      }));\n      await axios.all(requestList);\n      console.log(uploadedList, requestList, this.data);\n      if (uploadedList.length + requestList.length === this.data.length) {\n        console.log(333);\n        await this.mergeRequest();\n      }\n    },\n    async mergeRequest() {\n      axios.request({\n        url: \"http://localhost:401/merge\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name,\n          size: SIZE,\n          fileHash: this.container.hash\n        })\n      });\n    },\n    async upFileParse() {\n      if (!this.container.file) return;\n      this.status = Status.uploading;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.container.hash = await this.calculateHash(fileChunkList);\n      const {\n        shouldUpload,\n        uploadedList\n      } = await this.verifyUpload(this.container.file.name, this.container.hash);\n      if (!shouldUpload) {\n        alert(\"文件已经上成功\");\n        this.status = Status.wait;\n        return;\n      }\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        fileHash: this.container.hash,\n        index,\n        hash: this.container.file.name + \"-\" + index,\n        size: file.size,\n        percentage: 0\n      }));\n      await this.uploadChunks(uploadedList);\n    },\n    uploadProgressEvent(item) {\n      return e => {\n        item.percentage = parseInt(String(e.loaded / e.total * 100));\n      };\n    },\n    //暂停上传\n    handlePause() {\n      this.status = Status.pause;\n      source.cancel(\"终断上传\");\n      source = CancelToken.source(); //重置source，确保能够续传\n    },\n\n    async handleResume() {\n      this.status = Status.uploading;\n      const {\n        uploadedList\n      } = await this.verifyUpload(this.container.file.name, this.container.hash);\n      await this.uploadChunks(uploadedList);\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","SIZE","Status","wait","pause","uploading","CancelToken","source","components","name","filters","transformByte","val","Number","toFixed","computed","uploadPercentage","container","file","data","length","loaded","map","item","size","percentage","reduce","acc","cur","parseInt","status","hash","worker","requestList","hashPercentage","methods","calculateHash","fileChunkList","Promise","resolve","Worker","postMessage","onmessage","e","parseFile","target","files","verifyUpload","filename","fileHash","request","url","method","headers","JSON","stringify","console","log","createFileChunk","push","slice","uploadChunks","uploadedList","filter","includes","chunk","index","formData","FormData","append","header","onUploadProgress","uploadProgressEvent","cancelToken","token","then","res","catch","err","all","mergeRequest","upFileParse","shouldUpload","alert","String","total","handlePause","cancel","handleResume"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n    <el-button @click=\"handleResume\" v-if=\"status === Status.pause\"\r\n      >恢复上传</el-button\r\n    >\r\n    <el-button v-else @click=\"handlePause\">暂停上传</el-button>\r\n    <el-progress type=\"circle\" :percentage=\"uploadPercentage\"></el-progress>\r\n    <div>calculate chunk hash</div>\r\n    <el-progress :percentage=\"hashPercentage\"></el-progress>\r\n\r\n    <el-table :data=\"data\">\r\n      <el-table-column\r\n        prop=\"hash\"\r\n        label=\"chunk hash\"\r\n        align=\"center\"\r\n      ></el-table-column>\r\n      <el-table-column label=\"size(KB)\" align=\"center\" width=\"120\">\r\n        <template v-slot=\"{ row }\">\r\n          {{ row.size | transformByte }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"percentage\" align=\"center\">\r\n        <template v-slot=\"{ row }\">\r\n          <el-progress\r\n            :percentage=\"row.percentage\"\r\n            color=\"#909399\"\r\n          ></el-progress>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst SIZE = 10 * 1024 * 2;\r\nconst Status = {\r\n  wait: \"wait\",\r\n  pause: \"pause\",\r\n  uploading: \"uploading\",\r\n};\r\nconst CancelToken = axios.CancelToken;\r\nlet source = CancelToken.source();\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  filters: {\r\n    transformByte(val) {\r\n      return Number((val / 1024).toFixed(0));\r\n    },\r\n  },\r\n  computed: {\r\n    uploadPercentage() {\r\n      if (!this.container.file || !this.data.length) return 0;\r\n      const loaded = this.data\r\n        .map((item) => item.size * item.percentage)\r\n        .reduce((acc, cur) => acc + cur);\r\n      return parseInt((loaded / this.container.file.size).toFixed(2));\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      Status,\r\n      status: Status.wait,\r\n      container: {\r\n        file: null,\r\n        hash: \"\",\r\n        worker: null,\r\n      },\r\n      requestList: [],\r\n      hashPercentage: 0,\r\n      data: [], //保存切片文件数组\r\n    };\r\n  },\r\n  methods: {\r\n    //生成文件hash\r\n    calculateHash(fileChunkList) {\r\n      return new Promise((resolve) => {\r\n        this.container.worker = new Worker(\"/hash.js\");\r\n        this.container.worker.postMessage({ fileChunkList });\r\n        this.container.worker.onmessage = (e) => {\r\n          const { percentage, hash } = e.data;\r\n          this.hashPercentage = percentage;\r\n          if (hash) {\r\n            resolve(hash);\r\n          }\r\n        };\r\n      });\r\n    },\r\n    parseFile(e) {\r\n      // source.cancel(\"终断上传\");\r\n      //source = CancelToken.source();\r\n      this.container.file = e.target.files[0];\r\n    },\r\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\r\n    async verifyUpload(filename, fileHash) {\r\n      const { data } = await axios.request({\r\n        url: \"http://localhost:401/verify\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ filename, fileHash }),\r\n      });\r\n      console.log(data);\r\n      return data; //不需要使用JSON.parse(data),axios内部已经做了转换\r\n    },\r\n    createFileChunk(file, size = SIZE) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    async uploadChunks(uploadedList = []) {\r\n      const requestList = this.data\r\n        .filter(({ hash }) => !uploadedList.includes(hash))\r\n        .map(({ chunk, hash, index }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"fileHash\", this.container.hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return { formData, index }; //一定要加括号\r\n        })\r\n        .map(({ formData, index }) =>\r\n          axios\r\n            .request({\r\n              method: \"post\",\r\n              url: \"http://localhost:401\",\r\n              header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n              onUploadProgress: this.uploadProgressEvent(this.data[index]),\r\n              cancelToken: source.token,\r\n              data: formData,\r\n            })\r\n            .then((res) => {\r\n              console.log(res);\r\n            \r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            })\r\n        );\r\n      await axios.all(requestList)\r\n      console.log(uploadedList, requestList, this.data);\r\n      if (uploadedList.length + requestList.length === this.data.length) {\r\n        console.log(333);\r\n        await this.mergeRequest();\r\n      }\r\n    },\r\n    async mergeRequest() {\r\n      axios.request({\r\n        url: \"http://localhost:401/merge\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({\r\n          filename: this.container.file.name,\r\n          size: SIZE,\r\n          fileHash: this.container.hash,\r\n        }),\r\n      });\r\n    },\r\n    async upFileParse() {\r\n      if (!this.container.file) return;\r\n      this.status = Status.uploading;\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      this.container.hash = await this.calculateHash(fileChunkList);\r\n      const { shouldUpload, uploadedList } = await this.verifyUpload(\r\n        this.container.file.name,\r\n        this.container.hash\r\n      );\r\n      if (!shouldUpload) {\r\n        alert(\"文件已经上成功\");\r\n        this.status = Status.wait;\r\n        return;\r\n      }\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        fileHash: this.container.hash,\r\n        index,\r\n        hash: this.container.file.name + \"-\" + index,\r\n        size: file.size,\r\n        percentage: 0,\r\n      }));\r\n      await this.uploadChunks(uploadedList);\r\n    },\r\n    uploadProgressEvent(item) {\r\n      return (e) => {\r\n        item.percentage = parseInt(String((e.loaded / e.total) * 100));\r\n      };\r\n    },\r\n    //暂停上传\r\n    handlePause() {\r\n      this.status = Status.pause;\r\n      source.cancel(\"终断上传\");\r\n      source = CancelToken.source(); //重置source，确保能够续传\r\n    },\r\n    async handleResume() {\r\n      this.status = Status.uploading;\r\n      const { uploadedList } = await this.verifyUpload(\r\n        this.container.file.name,\r\n        this.container.hash\r\n      );\r\n      await this.uploadChunks(uploadedList);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}