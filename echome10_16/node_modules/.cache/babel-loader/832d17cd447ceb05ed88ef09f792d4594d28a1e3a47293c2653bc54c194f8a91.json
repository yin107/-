{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst Status = {\n  wait: \"wait\",\n  pause: \"pause\",\n  uploading: \"uploading\"\n};\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  data() {\n    return {\n      container: {\n        file: null\n      },\n      data: [] //保存切片文件数组\n    };\n  },\n\n  methods: {\n    parseFile(e) {\n      this.container.file = e.target.files[0];\n    },\n    createFileChunk(file, size = 2 * 20000) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks() {\n      const requestList = this.data.map(({\n        chunk,\n        hash\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData\n        }; //一定要加括号\n      }).map(({\n        formData\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:401\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: formData\n      }).then(res => {\n        console.log(res);\n      }));\n      await Promise.all(requestList);\n      await this.mergeRequest;\n    },\n    async mergeRequest() {\n      axios.request({\n        url: \"http://localhost:401/merge\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name\n        })\n      });\n    },\n    async upFileParse() {\n      console.log(3);\n      if (!this.container.file) return;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        hash: this.container.file.name + \"-\" + index\n      }));\n      await this.uploadChunks();\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","Status","wait","pause","uploading","components","name","data","container","file","methods","parseFile","e","target","files","createFileChunk","size","fileChunkList","cur","push","slice","uploadChunks","requestList","map","chunk","hash","formData","FormData","append","request","method","url","header","then","res","console","log","Promise","all","mergeRequest","headers","JSON","stringify","filename","upFileParse","index"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst Status = {\r\n  wait: \"wait\",\r\n  pause: \"pause\",\r\n  uploading: \"uploading\",\r\n};\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  data() {\r\n    return {\r\n      container: {\r\n        file: null,\r\n      },\r\n      data: [], //保存切片文件数组\r\n    };\r\n  },\r\n  methods: {\r\n    parseFile(e) {\r\n      this.container.file = e.target.files[0];\r\n    },\r\n    createFileChunk(file, size = 2 * 20000) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    async uploadChunks() {\r\n      const requestList = this.data\r\n        .map(({ chunk, hash }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return {formData};//一定要加括号\r\n        })\r\n        .map(({ formData }) =>\r\n          axios.request({\r\n            method: \"post\",\r\n            url: \"http://localhost:401\",\r\n            header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n            data: formData,\r\n          }).then(res=>{console.log(res);})\r\n        );\r\n      await Promise.all(requestList);\r\n\t  await this.mergeRequest\r\n    },\r\n    async mergeRequest() {\r\n      axios.request({\r\n        url: \"http://localhost:401/merge\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ filename: this.container.file.name }),\r\n      });\r\n    },\r\n    async upFileParse() {\r\n      console.log(3);\r\n      if (!this.container.file) return;\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        hash: this.container.file.name + \"-\" + index,\r\n      }));\r\n      await this.uploadChunks();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";AAUA,OAAAA,UAAA;AACA,OAAAC,KAAA;AACA,MAAAC,MAAA;EACAC,IAAA;EACAC,KAAA;EACAC,SAAA;AACA;AACA;EACAC,UAAA;IAAAN;EAAA;EACAO,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,IAAA;MACA;MACAF,IAAA;IACA;EACA;;EACAG,OAAA;IACAC,UAAAC,CAAA;MACA,KAAAJ,SAAA,CAAAC,IAAA,GAAAG,CAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;IACAC,gBAAAN,IAAA,EAAAO,IAAA;MACA,MAAAC,aAAA;MACA,IAAAC,GAAA;MACA,OAAAA,GAAA,GAAAT,IAAA,CAAAO,IAAA;QACAC,aAAA,CAAAE,IAAA;UAAAV,IAAA,EAAAA,IAAA,CAAAW,KAAA,CAAAF,GAAA,EAAAA,GAAA,GAAAF,IAAA;QAAA;QACAE,GAAA,IAAAF,IAAA;MACA;MACA,OAAAC,aAAA;IACA;IACA,MAAAI,aAAA;MACA,MAAAC,WAAA,QAAAf,IAAA,CACAgB,GAAA;QAAAC,KAAA;QAAAC;MAAA;QACA,MAAAC,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,MAAA,UAAAJ,KAAA;QACAE,QAAA,CAAAE,MAAA,SAAAH,IAAA;QACAC,QAAA,CAAAE,MAAA,kBAAApB,SAAA,CAAAC,IAAA,CAAAH,IAAA;QACA;UAAAoB;QAAA;MACA,GACAH,GAAA;QAAAG;MAAA,MACA1B,KAAA,CAAA6B,OAAA;QACAC,MAAA;QACAC,GAAA;QACAC,MAAA;UAAA;QAAA;QACAzB,IAAA,EAAAmB;MACA,GAAAO,IAAA,CAAAC,GAAA;QAAAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MAAA,GACA;MACA,MAAAG,OAAA,CAAAC,GAAA,CAAAhB,WAAA;MACA,WAAAiB,YAAA;IACA;IACA,MAAAA,aAAA;MACAvC,KAAA,CAAA6B,OAAA;QACAE,GAAA;QACAD,MAAA;QACAU,OAAA;UACA;QACA;QACAjC,IAAA,EAAAkC,IAAA,CAAAC,SAAA;UAAAC,QAAA,OAAAnC,SAAA,CAAAC,IAAA,CAAAH;QAAA;MACA;IACA;IACA,MAAAsC,YAAA;MACAT,OAAA,CAAAC,GAAA;MACA,UAAA5B,SAAA,CAAAC,IAAA;MACA,MAAAQ,aAAA,QAAAF,eAAA,MAAAP,SAAA,CAAAC,IAAA;MACA,KAAAF,IAAA,GAAAU,aAAA,CAAAM,GAAA;QAAAd;MAAA,GAAAoC,KAAA;QACArB,KAAA,EAAAf,IAAA;QACAgB,IAAA,OAAAjB,SAAA,CAAAC,IAAA,CAAAH,IAAA,SAAAuC;MACA;MACA,WAAAxB,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}