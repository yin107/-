{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst SIZE = 10 * 1024 * 2;\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0));\n    }\n  },\n  data() {\n    return {\n      container: {\n        file: null\n      },\n      data: [] //保存切片文件数组\n    };\n  },\n\n  methods: {\n    parseFile(e) {\n      this.container.file = e.target.files[0];\n    },\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks() {\n      const requestList = this.data.map(({\n        chunk,\n        hash,\n        index\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData,\n          index\n        }; //一定要加括号\n      }).map(({\n        formData,\n        index\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:401\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        onUploadProgress: this.uploadProgressEvent(this.data[index]),\n        data: formData\n      }).then(res => {\n        console.log(res);\n      }));\n      await Promise.all(requestList);\n      this.mergeRequest();\n    },\n    async mergeRequest() {\n      axios.request({\n        url: \"http://localhost:401/merge\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name,\n          size: SIZE\n        })\n      });\n    },\n    async upFileParse() {\n      console.log(3);\n      if (!this.container.file) return;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        index,\n        hash: this.container.file.name + \"-\" + index,\n        size: file.size,\n        percentage: 0\n      }));\n      await this.uploadChunks();\n    },\n    uploadProgressEvent(item) {\n      return e => {\n        item.percentage = parseInt(String(e.loaded / e.total * 100));\n      };\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","SIZE","components","name","filters","transformByte","val","Number","toFixed","data","container","file","methods","parseFile","e","target","files","createFileChunk","size","fileChunkList","cur","push","slice","uploadChunks","requestList","map","chunk","hash","index","formData","FormData","append","request","method","url","header","onUploadProgress","uploadProgressEvent","then","res","console","log","Promise","all","mergeRequest","headers","JSON","stringify","filename","upFileParse","percentage","item","parseInt","String","loaded","total"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n\t<el-progress type=\"circle\" :percentage=\"25\" width:100></el-progress>\r\n\r\n    <el-table :data=\"data\">\r\n      <el-table-column\r\n        prop=\"hash\"\r\n        label=\"chunk hash\"\r\n        align=\"center\"\r\n      ></el-table-column>\r\n      <el-table-column label=\"size(KB)\" align=\"center\" width=\"120\">\r\n        <template v-slot=\"{ row }\">\r\n          {{ row.size|transformByte}}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"percentage\" align=\"center\">\r\n        <template v-slot=\"{ row }\">\r\n          <el-progress\r\n            :percentage=\"row.percentage\"\r\n            color=\"#909399\"\r\n          ></el-progress>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst SIZE = 10 * 1024 * 2;\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  filters: {\r\n    transformByte(val) {\r\n      return Number((val / 1024).toFixed(0));\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      container: {\r\n        file: null,\r\n      },\r\n      data: [], //保存切片文件数组\r\n    };\r\n  },\r\n  methods: {\r\n    parseFile(e) {\r\n      this.container.file = e.target.files[0];\r\n    },\r\n    createFileChunk(file, size = SIZE) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    async uploadChunks() {\r\n      const requestList = this.data\r\n        .map(({ chunk, hash, index }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return { formData, index }; //一定要加括号\r\n        })\r\n        .map(({ formData, index }) =>\r\n          axios\r\n            .request({\r\n              method: \"post\",\r\n              url: \"http://localhost:401\",\r\n              header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n              onUploadProgress: this.uploadProgressEvent(this.data[index]),\r\n              data: formData,\r\n            })\r\n            .then((res) => {\r\n              console.log(res);\r\n            })\r\n        );\r\n      await Promise.all(requestList);\r\n      this.mergeRequest();\r\n    },\r\n    async mergeRequest() {\r\n      axios.request({\r\n        url: \"http://localhost:401/merge\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({\r\n          filename: this.container.file.name,\r\n          size: SIZE,\r\n        }),\r\n      });\r\n    },\r\n    async upFileParse() {\r\n      console.log(3);\r\n      if (!this.container.file) return;\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        index,\r\n        hash: this.container.file.name + \"-\" + index,\r\n\t\tsize:file.size,\r\n        percentage: 0,\r\n      }));\r\n      await this.uploadChunks();\r\n    },\r\n    uploadProgressEvent(item) {\r\n      return (e) => {\r\n        item.percentage = parseInt(String((e.loaded / e.total) * 100));\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";AAiCA,OAAAA,UAAA;AACA,OAAAC,KAAA;AACA,MAAAC,IAAA;AACA;EACAC,UAAA;IAAAH;EAAA;EACAI,IAAA;EACAC,OAAA;IACAC,cAAAC,GAAA;MACA,OAAAC,MAAA,EAAAD,GAAA,SAAAE,OAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,IAAA;MACA;MACAF,IAAA;IACA;EACA;;EACAG,OAAA;IACAC,UAAAC,CAAA;MACA,KAAAJ,SAAA,CAAAC,IAAA,GAAAG,CAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;IACAC,gBAAAN,IAAA,EAAAO,IAAA,GAAAjB,IAAA;MACA,MAAAkB,aAAA;MACA,IAAAC,GAAA;MACA,OAAAA,GAAA,GAAAT,IAAA,CAAAO,IAAA;QACAC,aAAA,CAAAE,IAAA;UAAAV,IAAA,EAAAA,IAAA,CAAAW,KAAA,CAAAF,GAAA,EAAAA,GAAA,GAAAF,IAAA;QAAA;QACAE,GAAA,IAAAF,IAAA;MACA;MACA,OAAAC,aAAA;IACA;IACA,MAAAI,aAAA;MACA,MAAAC,WAAA,QAAAf,IAAA,CACAgB,GAAA;QAAAC,KAAA;QAAAC,IAAA;QAAAC;MAAA;QACA,MAAAC,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,MAAA,UAAAL,KAAA;QACAG,QAAA,CAAAE,MAAA,SAAAJ,IAAA;QACAE,QAAA,CAAAE,MAAA,kBAAArB,SAAA,CAAAC,IAAA,CAAAR,IAAA;QACA;UAAA0B,QAAA;UAAAD;QAAA;MACA,GACAH,GAAA;QAAAI,QAAA;QAAAD;MAAA,MACA5B,KAAA,CACAgC,OAAA;QACAC,MAAA;QACAC,GAAA;QACAC,MAAA;UAAA;QAAA;QACAC,gBAAA,OAAAC,mBAAA,MAAA5B,IAAA,CAAAmB,KAAA;QACAnB,IAAA,EAAAoB;MACA,GACAS,IAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACA,GACA;MACA,MAAAG,OAAA,CAAAC,GAAA,CAAAnB,WAAA;MACA,KAAAoB,YAAA;IACA;IACA,MAAAA,aAAA;MACA5C,KAAA,CAAAgC,OAAA;QACAE,GAAA;QACAD,MAAA;QACAY,OAAA;UACA;QACA;QACApC,IAAA,EAAAqC,IAAA,CAAAC,SAAA;UACAC,QAAA,OAAAtC,SAAA,CAAAC,IAAA,CAAAR,IAAA;UACAe,IAAA,EAAAjB;QACA;MACA;IACA;IACA,MAAAgD,YAAA;MACAT,OAAA,CAAAC,GAAA;MACA,UAAA/B,SAAA,CAAAC,IAAA;MACA,MAAAQ,aAAA,QAAAF,eAAA,MAAAP,SAAA,CAAAC,IAAA;MACA,KAAAF,IAAA,GAAAU,aAAA,CAAAM,GAAA;QAAAd;MAAA,GAAAiB,KAAA;QACAF,KAAA,EAAAf,IAAA;QACAiB,KAAA;QACAD,IAAA,OAAAjB,SAAA,CAAAC,IAAA,CAAAR,IAAA,SAAAyB,KAAA;QACAV,IAAA,EAAAP,IAAA,CAAAO,IAAA;QACAgC,UAAA;MACA;MACA,WAAA3B,YAAA;IACA;IACAc,oBAAAc,IAAA;MACA,OAAArC,CAAA;QACAqC,IAAA,CAAAD,UAAA,GAAAE,QAAA,CAAAC,MAAA,CAAAvC,CAAA,CAAAwC,MAAA,GAAAxC,CAAA,CAAAyC,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}