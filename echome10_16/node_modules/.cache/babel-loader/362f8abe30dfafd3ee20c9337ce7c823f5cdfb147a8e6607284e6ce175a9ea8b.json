{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst SIZE = 10 * 1024 * 2;\nconst Status = {\n  wait: \"wait\",\n  pause: \"pause\",\n  uploading: \"uploading\"\n};\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0));\n    }\n  },\n  computed: {\n    uploadPercentage() {\n      if (!this.container.file || !this.data.length) return 0;\n      const loaded = this.data.map(item => item.size * item.percentage).reduce((acc, cur) => acc + cur);\n      return parseInt((loaded / this.container.file.size).toFixed(2));\n    }\n  },\n  data() {\n    return {\n      Status,\n      status: Status.wait,\n      container: {\n        file: null,\n        hash: \"\",\n        worker: null\n      },\n      hashPercentage: 0,\n      data: [],\n      //保存切片文件数组\n      CancelToken: axios.CancelToken,\n      sourse: this.CancelToken.source()\n    };\n  },\n  methods: {\n    //生成文件hash\n    calculateHash(fileChunkList) {\n      return new Promise(resolve => {\n        this.container.worker = new Worker(\"/hash.js\");\n        this.container.worker.postMessage({\n          fileChunkList\n        });\n        this.container.worker.onmessage = e => {\n          const {\n            percentage,\n            hash\n          } = e.data;\n          this.hashPercentage = percentage;\n          if (hash) {\n            resolve(hash);\n          }\n        };\n      });\n    },\n    parseFile(e) {\n      this.container.file = e.target.files[0];\n    },\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\n    async verifyUpload(filename, fileHash) {\n      const {\n        data\n      } = await axios.request({\n        url: \"http://localhost:401/verify\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename,\n          fileHash\n        })\n      });\n      console.log(data);\n      return data; //不需要使用JSON.parse(data),axios内部已经做了转换\n    },\n\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks() {\n      const requestList = this.data.map(({\n        chunk,\n        hash,\n        index\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"fileHash\", this.container.hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData,\n          index\n        }; //一定要加括号\n      }).map(({\n        formData,\n        index\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:401\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        onUploadProgress: this.uploadProgressEvent(this.data[index]),\n        cancelToken: this.sourse.token,\n        data: formData\n      }).then(res => {\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n      }));\n      await Promise.all(requestList);\n      this.mergeRequest();\n    },\n    async mergeRequest() {\n      axios.request({\n        url: \"http://localhost:401/merge\",\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name,\n          size: SIZE,\n          fileHash: this.container.hash\n        })\n      });\n    },\n    async upFileParse() {\n      if (!this.container.file) return;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.container.hash = await this.calculateHash(fileChunkList);\n      const {\n        shouldUpload\n      } = await this.verifyUpload(this.container.file.name, this.container.hash);\n      if (!shouldUpload) {\n        alert(\"文件已经上成功\");\n        return;\n      }\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        fileHash: this.container.hash,\n        index,\n        hash: this.container.file.name + \"-\" + index,\n        size: file.size,\n        percentage: 0\n      }));\n      await this.uploadChunks();\n    },\n    uploadProgressEvent(item) {\n      return e => {\n        item.percentage = parseInt(String(e.loaded / e.total * 100));\n      };\n    },\n    //暂停上传\n    handlePause() {\n      this.status = Status.pause;\n      this.source.cancel(\"终断上传\");\n      this.sourse = this.CancelToken.source();\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","SIZE","Status","wait","pause","uploading","components","name","filters","transformByte","val","Number","toFixed","computed","uploadPercentage","container","file","data","length","loaded","map","item","size","percentage","reduce","acc","cur","parseInt","status","hash","worker","hashPercentage","CancelToken","sourse","source","methods","calculateHash","fileChunkList","Promise","resolve","Worker","postMessage","onmessage","e","parseFile","target","files","verifyUpload","filename","fileHash","request","url","method","headers","JSON","stringify","console","log","createFileChunk","push","slice","uploadChunks","requestList","chunk","index","formData","FormData","append","header","onUploadProgress","uploadProgressEvent","cancelToken","token","then","res","catch","err","all","mergeRequest","upFileParse","shouldUpload","alert","String","total","handlePause","cancel"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n    <el-button @click=\"handleResume\" v-if=\"stattus === Status.pause\"\r\n      >恢复上传</el-button\r\n    >\r\n    <el-button v-else @click=\"handlePause\">暂停上传</el-button>\r\n    <el-progress type=\"circle\" :percentage=\"uploadPercentage\"></el-progress>\r\n    <div>calculate chunk hash</div>\r\n    <el-progress :percentage=\"hashPercentage\"></el-progress>\r\n\r\n    <el-table :data=\"data\">\r\n      <el-table-column\r\n        prop=\"hash\"\r\n        label=\"chunk hash\"\r\n        align=\"center\"\r\n      ></el-table-column>\r\n      <el-table-column label=\"size(KB)\" align=\"center\" width=\"120\">\r\n        <template v-slot=\"{ row }\">\r\n          {{ row.size | transformByte }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"percentage\" align=\"center\">\r\n        <template v-slot=\"{ row }\">\r\n          <el-progress\r\n            :percentage=\"row.percentage\"\r\n            color=\"#909399\"\r\n          ></el-progress>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst SIZE = 10 * 1024 * 2;\r\nconst Status = {\r\n  wait: \"wait\",\r\n  pause: \"pause\",\r\n  uploading: \"uploading\",\r\n};\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  filters: {\r\n    transformByte(val) {\r\n      return Number((val / 1024).toFixed(0));\r\n    },\r\n  },\r\n  computed: {\r\n    uploadPercentage() {\r\n      if (!this.container.file || !this.data.length) return 0;\r\n      const loaded = this.data\r\n        .map((item) => item.size * item.percentage)\r\n        .reduce((acc, cur) => acc + cur);\r\n      return parseInt((loaded / this.container.file.size).toFixed(2));\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      Status,\r\n      status: Status.wait,\r\n      container: {\r\n        file: null,\r\n        hash: \"\",\r\n        worker: null,\r\n      },\r\n      hashPercentage: 0,\r\n      data: [], //保存切片文件数组\r\n      CancelToken: axios.CancelToken,\r\n      sourse: this.CancelToken.source(),\r\n    };\r\n  },\r\n  methods: {\r\n    //生成文件hash\r\n    calculateHash(fileChunkList) {\r\n      return new Promise((resolve) => {\r\n        this.container.worker = new Worker(\"/hash.js\");\r\n        this.container.worker.postMessage({ fileChunkList });\r\n        this.container.worker.onmessage = (e) => {\r\n          const { percentage, hash } = e.data;\r\n          this.hashPercentage = percentage;\r\n          if (hash) {\r\n            resolve(hash);\r\n          }\r\n        };\r\n      });\r\n    },\r\n    parseFile(e) {\r\n      this.container.file = e.target.files[0];\r\n    },\r\n    //上传文件前先判断服务端是否已经存在上传资源，如果已经有了则直接返回上传成功的信息\r\n    async verifyUpload(filename, fileHash) {\r\n      const { data } = await axios.request({\r\n        url: \"http://localhost:401/verify\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ filename, fileHash }),\r\n      });\r\n      console.log(data);\r\n      return data; //不需要使用JSON.parse(data),axios内部已经做了转换\r\n    },\r\n    createFileChunk(file, size = SIZE) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    async uploadChunks() {\r\n      const requestList = this.data\r\n        .map(({ chunk, hash, index }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"fileHash\", this.container.hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return { formData, index }; //一定要加括号\r\n        })\r\n        .map(({ formData, index }) =>\r\n          axios\r\n            .request({\r\n              method: \"post\",\r\n              url: \"http://localhost:401\",\r\n              header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n              onUploadProgress: this.uploadProgressEvent(this.data[index]),\r\n              cancelToken: this.sourse.token,\r\n              data: formData,\r\n            })\r\n            .then((res) => {\r\n              console.log(res);\r\n            }).catch(err=>{console.log(err);})\r\n        );\r\n      await Promise.all(requestList);\r\n      this.mergeRequest();\r\n    },\r\n    async mergeRequest() {\r\n      axios.request({\r\n        url: \"http://localhost:401/merge\",\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({\r\n          filename: this.container.file.name,\r\n          size: SIZE,\r\n          fileHash: this.container.hash,\r\n        }),\r\n      });\r\n    },\r\n    async upFileParse() {\r\n      if (!this.container.file) return;\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      this.container.hash = await this.calculateHash(fileChunkList);\r\n      const { shouldUpload } = await this.verifyUpload(\r\n        this.container.file.name,\r\n        this.container.hash\r\n      );\r\n      if (!shouldUpload) {\r\n        alert(\"文件已经上成功\");\r\n        return;\r\n      }\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        fileHash: this.container.hash,\r\n        index,\r\n        hash: this.container.file.name + \"-\" + index,\r\n        size: file.size,\r\n        percentage: 0,\r\n      }));\r\n      await this.uploadChunks();\r\n    },\r\n    uploadProgressEvent(item) {\r\n      return (e) => {\r\n        item.percentage = parseInt(String((e.loaded / e.total) * 100));\r\n      };\r\n    },\r\n    //暂停上传\r\n    handlePause() {\r\n      this.status = Status.pause;\r\n      this.source.cancel(\"终断上传\");\r\n      this.sourse = this.CancelToken.source();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}