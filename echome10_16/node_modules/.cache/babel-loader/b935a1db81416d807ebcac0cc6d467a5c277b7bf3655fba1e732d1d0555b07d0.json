{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst Status = {\n  wait: \"wait\",\n  pause: \"pause\",\n  uploading: \"uploading\"\n};\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  data() {\n    return {\n      container: {\n        file: null\n      },\n      data: [] //保存切片文件数组\n    };\n  },\n\n  methods: {\n    parseFile(e) {\n      this.container.file = e.target.files[0];\n    },\n    createFileChunk(file, size = 2 * 20000) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    async uploadChunks() {\n      const requestList = this.data.map(({\n        chunk,\n        hash\n      }) => {\n        const formData = new FormData();\n        formData.append('chunk', chunk);\n        formData.append('hash', hash);\n        formData.append('filename', this.container.file.name);\n        return formData;\n      }).map(({\n        formData\n      }) => axios.request({\n        url: \"http://localhost:401\",\n        method: \"post\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: formData\n      }));\n      await Promise.all(requestList);\n    },\n    async upFileParse() {\n      console.log(3);\n      if (!this.container.file) return;\n      const fileChunkList = this.createFileChunk(this.container.file);\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        hash: this.container.file.name + '-' + index\n      }));\n      await this.uploadChunks();\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","Status","wait","pause","uploading","components","name","data","container","file","methods","parseFile","e","target","files","createFileChunk","size","fileChunkList","cur","push","slice","uploadChunks","requestList","map","chunk","hash","formData","FormData","append","request","url","method","header","Promise","all","upFileParse","console","log","index"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n    <input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst Status = {\r\n  wait: \"wait\",\r\n  pause: \"pause\",\r\n  uploading: \"uploading\",\r\n};\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  data() {\r\n    return {\r\n      container: {\r\n        file: null,\r\n      },\r\n      data: [], //保存切片文件数组\r\n\t}\r\n  },\r\n  methods: {\r\n\tparseFile(e){\r\n\t\tthis.container.file=e.target.files[0]\r\n\t},\r\n\tcreateFileChunk(file,size=2*20000){\r\n\t\tconst fileChunkList=[]\r\n\t\tlet cur=0\r\n\t\twhile(cur<file.size){\r\n\t\t\tfileChunkList.push({file:file.slice(cur,cur+size)})\r\n\t\t\tcur+=size\r\n\t\t}\r\n\t\treturn fileChunkList\r\n\t},\r\n\tasync uploadChunks(){\r\nconst requestList=this.data.map(({chunk,hash})=>{\r\n\tconst formData=new FormData()\r\n\tformData.append('chunk',chunk)\r\n\tformData.append('hash',hash)\r\n\tformData.append('filename',this.container.file.name)\r\n\treturn formData\r\n}).map(({formData})=>\r\naxios.request({\r\n\turl:\"http://localhost:401\",\r\n\tmethod:\"post\",\r\n\theader: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n                data: formData,\r\n})\r\n)\r\nawait Promise.all(requestList)\r\n\t},\r\n\tasync upFileParse(){\r\n\t\tconsole.log(3);\r\n\t\tif(!this.container.file) return\r\n\t\tconst fileChunkList=this.createFileChunk(this.container.file)\r\n\t\tthis.data=fileChunkList.map(({file},index)=>({\r\n\t\t\tchunk:file,\r\n\t\t\thash:this.container.file.name+'-'+index\r\n\t\t}))\r\n\t\tawait this.uploadChunks()\r\n\t}\r\n}\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";AAUA,OAAAA,UAAA;AACA,OAAAC,KAAA;AACA,MAAAC,MAAA;EACAC,IAAA;EACAC,KAAA;EACAC,SAAA;AACA;AACA;EACAC,UAAA;IAAAN;EAAA;EACAO,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,IAAA;MACA;MACAF,IAAA;IACA;EACA;;EACAG,OAAA;IACAC,UAAAC,CAAA;MACA,KAAAJ,SAAA,CAAAC,IAAA,GAAAG,CAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;IACAC,gBAAAN,IAAA,EAAAO,IAAA;MACA,MAAAC,aAAA;MACA,IAAAC,GAAA;MACA,OAAAA,GAAA,GAAAT,IAAA,CAAAO,IAAA;QACAC,aAAA,CAAAE,IAAA;UAAAV,IAAA,EAAAA,IAAA,CAAAW,KAAA,CAAAF,GAAA,EAAAA,GAAA,GAAAF,IAAA;QAAA;QACAE,GAAA,IAAAF,IAAA;MACA;MACA,OAAAC,aAAA;IACA;IACA,MAAAI,aAAA;MACA,MAAAC,WAAA,QAAAf,IAAA,CAAAgB,GAAA;QAAAC,KAAA;QAAAC;MAAA;QACA,MAAAC,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,MAAA,UAAAJ,KAAA;QACAE,QAAA,CAAAE,MAAA,SAAAH,IAAA;QACAC,QAAA,CAAAE,MAAA,kBAAApB,SAAA,CAAAC,IAAA,CAAAH,IAAA;QACA,OAAAoB,QAAA;MACA,GAAAH,GAAA;QAAAG;MAAA,MACA1B,KAAA,CAAA6B,OAAA;QACAC,GAAA;QACAC,MAAA;QACAC,MAAA;UAAA;QAAA;QACAzB,IAAA,EAAAmB;MACA,GACA;MACA,MAAAO,OAAA,CAAAC,GAAA,CAAAZ,WAAA;IACA;IACA,MAAAa,YAAA;MACAC,OAAA,CAAAC,GAAA;MACA,UAAA7B,SAAA,CAAAC,IAAA;MACA,MAAAQ,aAAA,QAAAF,eAAA,MAAAP,SAAA,CAAAC,IAAA;MACA,KAAAF,IAAA,GAAAU,aAAA,CAAAM,GAAA;QAAAd;MAAA,GAAA6B,KAAA;QACAd,KAAA,EAAAf,IAAA;QACAgB,IAAA,OAAAjB,SAAA,CAAAC,IAAA,CAAAH,IAAA,SAAAgC;MACA;MACA,WAAAjB,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}