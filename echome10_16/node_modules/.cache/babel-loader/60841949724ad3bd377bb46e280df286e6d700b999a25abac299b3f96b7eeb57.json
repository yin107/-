{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport tableStep2 from \"./components/tableStep2.vue\";\nimport dataCreateSuc from \"components/dataCreateSuc.vue\";\nimport { mixins } from \"@/minxin\";\nimport DataCreateSuc from \"../../../components/dataCreateSuc.vue\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    breadCrumb,\n    tableStep2,\n    dataCreateSuc,\n    DataCreateSuc\n  },\n  mixins: [mixins],\n  data() {\n    return {\n      files: null,\n      additionalData: null,\n      errorData: [],\n      rightData: [],\n      step: 1,\n      chunkList: [],\n      ary: [],\n      tableHead2: [{\n        prop: \"detail\",\n        label: \"详细\"\n      }, {\n        prop: \"construction_area\",\n        label: \"建筑面积\"\n      }, {\n        prop: \"name\",\n        label: \"业主姓名\"\n      }, {\n        prop: \"idcard\",\n        label: \"业主身份证号\"\n      }, {\n        prop: \"phone\",\n        label: \"业主电话号码\"\n      }]\n    };\n  },\n  mounted() {},\n  computed: {\n    tableHead3() {\n      let res = [];\n      res.push(...this.tableHead2);\n      res.push({\n        prop: \"error\",\n        label: \"错误原因\"\n      });\n      return res;\n    }\n  },\n  methods: {\n    createChunk(file, size = 2 * 20000) {\n      const chunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        chunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return chunkList;\n    },\n    parseFile(file) {\n      this.files = file;\n      //并完成文件的切片\n      this.chunkList = this.createChunk(this.files);\n      console.log(this.chunkList);\n      return false;\n    },\n    //给每个切片都封装一个promise,用于并发请求\n    async uploadFile(list) {\n      const requestList = list.map(({\n        file,\n        fileName,\n        index,\n        chunkName\n      }) => {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"fileName\", fileName);\n        formData.append(\"index\", index);\n        formData.append(\"chunkName\", chunkName);\n        return {\n          formData,\n          index\n        };\n      }).map(({\n        formData,\n        index\n      }) => axios.request({\n        method: \"post\",\n        url: \"http://localhost:400/upload\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: formData\n      }).then(res => {\n        console.log(res, index);\n      }));\n      await Promise.all(requestList);\n    },\n    upFileParse() {\n      //上传文件\n      const uploadList = this.chunkList.map(({\n        file\n      }, index) => ({\n        file,\n        size: file.size,\n        percent: 0,\n        chunkName: `${this.files.name}-${index}`,\n        fileName: this.files.name,\n        index\n      }));\n      this.uploadFile(uploadList);\n    },\n    gotoList() {\n      this.step = 1;\n      this.file = null;\n      this.rightData = [];\n      this.errorData = [];\n      this.$router.push({\n        name: \"building\"\n      });\n    },\n    //获取全部数据\n    getTotalData() {\n      this.$request({\n        url: \"/building/parse\",\n        method: \"post\",\n        data: {\n          id: this.file.uid\n        }\n      }).then(res => {\n        this.rightData = res.data.data.rightData;\n        this.errorData = res.data.data.errorData;\n        this.step++;\n        this.file = null;\n      });\n    },\n    //将正确的数据提交到后端\n    gotoStep3() {\n      this.$request({\n        url: \"/building/import\",\n        method: \"post\",\n        data: {\n          community_id: this.community_id,\n          buildings: this.rightData\n        }\n      }).then(() => {\n        this.step++;\n      });\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","tableStep2","dataCreateSuc","mixins","DataCreateSuc","axios","components","data","files","additionalData","errorData","rightData","step","chunkList","ary","tableHead2","prop","label","mounted","computed","tableHead3","res","push","methods","createChunk","file","size","cur","slice","parseFile","console","log","uploadFile","list","requestList","map","fileName","index","chunkName","formData","FormData","append","request","method","url","header","then","Promise","all","upFileParse","uploadList","percent","name","gotoList","$router","getTotalData","$request","id","uid","gotoStep3","community_id","buildings"],"sources":["src/views/basic/bulding/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <bread-crumb>\r\n      <span\r\n        slot=\"goback\"\r\n        style=\"float: right\"\r\n        @click=\"$router.go(-1)\"\r\n        class=\"doaction\"\r\n      >\r\n        返回</span\r\n      ></bread-crumb\r\n    >\r\n\r\n    <el-card style=\"margin-top: 20px\">\r\n      <!-- 步骤 -->\r\n      <el-steps :active=\"step\" align-center>\r\n        <el-step title=\"上传数据\" description=\"上传房产数据\"></el-step>\r\n        <el-step title=\"数据验证\" description=\"验证数据是否正确\"></el-step>\r\n        <el-step title=\"导入成功\" description=\"房产数据导入成功\"></el-step>\r\n      </el-steps>\r\n      <div v-if=\"step == 1\">\r\n        <!-- 上传 -->\r\n        <el-upload\r\n          class=\"upload-demo\"\r\n          drag\r\n          action=\"#\"\r\n          :before-upload=\"parseFile\"\r\n        >\r\n          <i class=\"el-icon-upload\"></i>\r\n\r\n          <div class=\"el-upload-text\">\r\n            <p v-if=\"files\">已选择：{{ files.name }}</p>\r\n            点击或拖拽访固定资产导入文件到此处，导入住在、商户数量受许可限制\r\n          </div>\r\n        </el-upload>\r\n        <el-button type=\"primary\" @click=\"upFileParse\">下一步</el-button>\r\n      </div>\r\n\r\n      <div v-if=\"step == 2\">\r\n        <table-step2 :tableData=\"rightData\" :tableHead=\"tableHead2\">\r\n          <p slot=\"title\" style=\"text-align: left\">\r\n            可导入数据{{ rightData.length }}条\r\n          </p>\r\n        </table-step2>\r\n\r\n        <table-step2 :tableData=\"errorData\" :tableHead=\"tableHead3\">\r\n          <p slot=\"title\" style=\"text-align: left\">\r\n            不可导入数据{{ errorData.length }}条\r\n          </p>\r\n        </table-step2>\r\n\r\n        <el-button @click=\"step--\"> 上一步</el-button>\r\n        <el-button type=\"primary\" @click=\"gotoStep3\">下一步</el-button>\r\n      </div>\r\n\r\n      <div v-if=\"step == 3\">\r\n        <data-create-suc>\r\n          <div slot=\"suce-info\">数据导入成功</div>\r\n          <div slot=\"mention-info\">本次共导入{{ rightData.length }}条数据</div>\r\n        </data-create-suc>\r\n        <el-button @click=\"step = 1\">继续导入</el-button>\r\n        <el-button @click=\"gotoList\" type=\"primary\">查看房产</el-button>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport tableStep2 from \"./components/tableStep2.vue\";\r\nimport dataCreateSuc from \"components/dataCreateSuc.vue\";\r\nimport { mixins } from \"@/minxin\";\r\nimport DataCreateSuc from \"../../../components/dataCreateSuc.vue\";\r\nimport axios from \"axios\";\r\nexport default {\r\n  components: { breadCrumb, tableStep2, dataCreateSuc, DataCreateSuc },\r\n  mixins: [mixins],\r\n  data() {\r\n    return {\r\n      files: null,\r\n      additionalData: null,\r\n      errorData: [],\r\n      rightData: [],\r\n      step: 1,\r\n      chunkList: [],\r\n      ary: [],\r\n      tableHead2: [\r\n        { prop: \"detail\", label: \"详细\" },\r\n        { prop: \"construction_area\", label: \"建筑面积\" },\r\n        { prop: \"name\", label: \"业主姓名\" },\r\n        { prop: \"idcard\", label: \"业主身份证号\" },\r\n        { prop: \"phone\", label: \"业主电话号码\" },\r\n      ],\r\n    };\r\n  },\r\n  mounted() {},\r\n  computed: {\r\n    tableHead3() {\r\n      let res = [];\r\n      res.push(...this.tableHead2);\r\n      res.push({ prop: \"error\", label: \"错误原因\" });\r\n      return res;\r\n    },\r\n  },\r\n  methods: {\r\n    createChunk(file, size = 2 * 20000) {\r\n      const chunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        chunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return chunkList;\r\n    },\r\n\r\n    parseFile(file) {\r\n      this.files = file;\r\n      //并完成文件的切片\r\n      this.chunkList = this.createChunk(this.files);\r\n      console.log(this.chunkList);\r\n      return false;\r\n    },\r\n    //给每个切片都封装一个promise,用于并发请求\r\n    async uploadFile(list) {\r\n      const requestList = list\r\n        .map(({ file, fileName, index, chunkName }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"file\", file);\r\n          formData.append(\"fileName\", fileName);\r\n          formData.append(\"index\", index);\r\n          formData.append(\"chunkName\", chunkName);\r\n          return { formData, index };\r\n        })\r\n        .map(({ formData, index }) =>\r\n          axios\r\n            .request({\r\n              method: \"post\",\r\n              url: \"http://localhost:400/upload\",\r\n              header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n              data: formData,\r\n            })\r\n            .then((res) => {\r\n              console.log(res, index);\r\n            })\r\n        );\r\n      await Promise.all(requestList);\r\n    },\r\n    upFileParse() {\r\n      //上传文件\r\n      const uploadList = this.chunkList.map(({ file }, index) => ({\r\n        file,\r\n        size: file.size,\r\n        percent: 0,\r\n        chunkName: `${this.files.name}-${index}`,\r\n        fileName: this.files.name,\r\n        index,\r\n      }));\r\n      this.uploadFile(uploadList);\r\n    },\r\n\r\n    gotoList() {\r\n      this.step = 1;\r\n      this.file = null;\r\n      this.rightData = [];\r\n      this.errorData = [];\r\n      this.$router.push({ name: \"building\" });\r\n    },\r\n    //获取全部数据\r\n    getTotalData() {\r\n      this.$request({\r\n        url: \"/building/parse\",\r\n        method: \"post\",\r\n        data: {\r\n          id: this.file.uid,\r\n        },\r\n      }).then((res) => {\r\n        this.rightData = res.data.data.rightData;\r\n        this.errorData = res.data.data.errorData;\r\n        this.step++;\r\n        this.file = null;\r\n      });\r\n    },\r\n\r\n    //将正确的数据提交到后端\r\n    gotoStep3() {\r\n      this.$request({\r\n        url: \"/building/import\",\r\n        method: \"post\",\r\n        data: {\r\n          community_id: this.community_id,\r\n          buildings: this.rightData,\r\n        },\r\n      }).then(() => {\r\n        this.step++;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.upload-demo {\r\n  width: 80%;\r\n  margin: 20px auto;\r\n  height: auto;\r\n}\r\n</style>\r\n<style>\r\n.upload-demo .el-upload .el-upload-dragger {\r\n  height: auto;\r\n  width: 600px;\r\n  padding-bottom: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}