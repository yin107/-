{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport breadCrumb from \"components/breadCrumb\";\nimport axios from \"axios\";\nconst Status = {\n  wait: \"wait\",\n  pause: \"pause\",\n  uploading: \"uploading\"\n};\nexport default {\n  components: {\n    breadCrumb\n  },\n  name: \"createVue\",\n  data() {\n    return {\n      container: {\n        file: null,\n        hash: \"\",\n        worker: null\n      },\n      hashPercentage: 0,\n      data: [],\n      //保存切片文件数组\n      requestList: [],\n      //保存封装promise请求之后的切片文件数组\n      Status,\n      status: Status.wait\n    };\n  },\n  methods: {\n    //生成切片文件\n    createFileChunk(file, size = 2 * 20000) {\n      const fileChunkList = [];\n      let cur = 0;\n      while (cur < file.size) {\n        fileChunkList.push({\n          file: file.slice(cur, cur + size)\n        });\n        cur += size;\n      }\n      return fileChunkList;\n    },\n    parseFile(file) {\n      this.container.file = file;\n      return false;\n    },\n    //给每个数组加一个promise请求\n    async uploadChunks() {\n      const requestList = this.data.map(({\n        chunk,\n        hash\n      }) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        formData.append(\"hash\", hash);\n        formData.append(\"filename\", this.container.file.name);\n        return {\n          formData\n        };\n      }).map(({\n        formData\n      }) => axios.request({\n        url: \"http://localhost:3000\",\n        method: \"post\",\n        header: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: formData\n      }));\n      console.log(requestList);\n      await Promise.all(requestList);\n    },\n    //文件上传\n    async upFileParse() {\n      //生成文件切片数组，\n      const fileChunkList = this.createFileChunk(this.container.file);\n      //添加属性\n      this.data = fileChunkList.map(({\n        file\n      }, index) => ({\n        chunk: file,\n        hash: this.container.file.name + \"-\" + index\n      }));\n      await this.uploadChunks();\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","axios","Status","wait","pause","uploading","components","name","data","container","file","hash","worker","hashPercentage","requestList","status","methods","createFileChunk","size","fileChunkList","cur","push","slice","parseFile","uploadChunks","map","chunk","formData","FormData","append","request","url","method","header","console","log","Promise","all","upFileParse","index"],"sources":["src/views/basic/fitment/create.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    新建装修\r\n\t<input type=\"file\" id=\"input\" @change=\"parseFile\" />\r\n    <el-button @click=\"upFileParse\">上传</el-button>\r\n    <div id=\"progress\">{{ pro }}</div>\r\n    <bread-crumb></bread-crumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nimport axios from \"axios\";\r\nconst Status = {\r\n  wait: \"wait\",\r\n  pause: \"pause\",\r\n  uploading: \"uploading\",\r\n};\r\nexport default {\r\n  components: { breadCrumb },\r\n  name: \"createVue\",\r\n  data() {\r\n    return {\r\n      container: {\r\n        file: null,\r\n        hash: \"\",\r\n        worker: null,\r\n      },\r\n      hashPercentage: 0,\r\n      data: [], //保存切片文件数组\r\n      requestList: [], //保存封装promise请求之后的切片文件数组\r\n      Status,\r\n      status: Status.wait,\r\n\t}\r\n  },\r\n  methods: {\r\n    //生成切片文件\r\n    createFileChunk(file, size = 2 * 20000) {\r\n      const fileChunkList = [];\r\n      let cur = 0;\r\n      while (cur < file.size) {\r\n        fileChunkList.push({ file: file.slice(cur, cur + size) });\r\n        cur += size;\r\n      }\r\n      return fileChunkList;\r\n    },\r\n    parseFile(file) {\r\n      this.container.file = file;\r\n      return false;\r\n    },\r\n    //给每个数组加一个promise请求\r\n    async uploadChunks() {\r\n      const requestList = this.data\r\n        .map(({ chunk, hash }) => {\r\n          const formData = new FormData();\r\n          formData.append(\"chunk\", chunk);\r\n          formData.append(\"hash\", hash);\r\n          formData.append(\"filename\", this.container.file.name);\r\n          return { formData };\r\n        })\r\n        .map(({ formData }) =>\r\n          axios.request({\r\n            url: \"http://localhost:3000\",\r\n            method: \"post\",\r\n            header: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n            data: formData,\r\n          })\r\n        );\r\n      console.log(requestList);\r\n      await Promise.all(requestList);\r\n    },\r\n    //文件上传\r\n    async upFileParse() {\r\n      //生成文件切片数组，\r\n      const fileChunkList = this.createFileChunk(this.container.file);\r\n      //添加属性\r\n      this.data = fileChunkList.map(({ file }, index) => ({\r\n        chunk: file,\r\n        hash: this.container.file.name + \"-\" + index,\r\n      }));\r\n      await this.uploadChunks();\r\n    },\r\n}\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";AAWA,OAAAA,UAAA;AACA,OAAAC,KAAA;AACA,MAAAC,MAAA;EACAC,IAAA;EACAC,KAAA;EACAC,SAAA;AACA;AACA;EACAC,UAAA;IAAAN;EAAA;EACAO,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,IAAA;QACAC,IAAA;QACAC,MAAA;MACA;MACAC,cAAA;MACAL,IAAA;MAAA;MACAM,WAAA;MAAA;MACAZ,MAAA;MACAa,MAAA,EAAAb,MAAA,CAAAC;IACA;EACA;EACAa,OAAA;IACA;IACAC,gBAAAP,IAAA,EAAAQ,IAAA;MACA,MAAAC,aAAA;MACA,IAAAC,GAAA;MACA,OAAAA,GAAA,GAAAV,IAAA,CAAAQ,IAAA;QACAC,aAAA,CAAAE,IAAA;UAAAX,IAAA,EAAAA,IAAA,CAAAY,KAAA,CAAAF,GAAA,EAAAA,GAAA,GAAAF,IAAA;QAAA;QACAE,GAAA,IAAAF,IAAA;MACA;MACA,OAAAC,aAAA;IACA;IACAI,UAAAb,IAAA;MACA,KAAAD,SAAA,CAAAC,IAAA,GAAAA,IAAA;MACA;IACA;IACA;IACA,MAAAc,aAAA;MACA,MAAAV,WAAA,QAAAN,IAAA,CACAiB,GAAA;QAAAC,KAAA;QAAAf;MAAA;QACA,MAAAgB,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,MAAA,UAAAH,KAAA;QACAC,QAAA,CAAAE,MAAA,SAAAlB,IAAA;QACAgB,QAAA,CAAAE,MAAA,kBAAApB,SAAA,CAAAC,IAAA,CAAAH,IAAA;QACA;UAAAoB;QAAA;MACA,GACAF,GAAA;QAAAE;MAAA,MACA1B,KAAA,CAAA6B,OAAA;QACAC,GAAA;QACAC,MAAA;QACAC,MAAA;UAAA;QAAA;QACAzB,IAAA,EAAAmB;MACA,GACA;MACAO,OAAA,CAAAC,GAAA,CAAArB,WAAA;MACA,MAAAsB,OAAA,CAAAC,GAAA,CAAAvB,WAAA;IACA;IACA;IACA,MAAAwB,YAAA;MACA;MACA,MAAAnB,aAAA,QAAAF,eAAA,MAAAR,SAAA,CAAAC,IAAA;MACA;MACA,KAAAF,IAAA,GAAAW,aAAA,CAAAM,GAAA;QAAAf;MAAA,GAAA6B,KAAA;QACAb,KAAA,EAAAhB,IAAA;QACAC,IAAA,OAAAF,SAAA,CAAAC,IAAA,CAAAH,IAAA,SAAAgC;MACA;MACA,WAAAf,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}