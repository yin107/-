{"ast":null,"code":"import breadCrumb from \"components/breadCrumb\";\nexport default {\n  components: {\n    breadCrumb\n  },\n  data() {\n    return {\n      filters: {\n        sex: undefined,\n        license: undefined,\n        remove: undefined,\n        bread: undefined,\n        coat_color: undefined\n      },\n      tableData: [],\n      tableHeader: [{\n        prop: \"id\",\n        label: \"编号\",\n        width: \"150\"\n      }, {\n        prop: \"name\",\n        label: \"宠物名\",\n        width: \"100 \"\n      }, {\n        prop: \"pet_type\",\n        label: \"宠物类型\",\n        width: \"80\"\n      }, {\n        prop: \"sex\",\n        label: \"雌雄\",\n        width: 40\n      }, {\n        prop: \"breed\",\n        label: \"品种\",\n        width: 80\n      }, {\n        prop: \"coat_color\",\n        label: \"毛色\",\n        width: 60\n      }, {\n        prop: \"pet_license\",\n        label: \"宠物登记\",\n        width: 100\n      }, {\n        prop: \"remove\",\n        label: \"是否注销\",\n        width: 100\n      }, {\n        prop: \"created_at\",\n        label: \"登记时间\"\n      }, {\n        prop: \"action\",\n        label: \"操作\"\n      }],\n      pagenum: 1,\n      //第几页\n      pagesize: 10 //这一页有多少条数据这个数据并不会改变表格里面的渲染数据的条数，在表格中他是根据tableData来显示的，tableData有几条数据就显示几条。pagesize作为每页显示的数目，pagenum作为当前页，在向后端请求数据的时候，会发送过去，后端将会根据这两个参数返回相对应的table数据，然后前端拿到这个table数据之后，根据这个数据进行渲染\n    };\n  },\n\n  methods: {\n    typeChose(val) {\n      var type = \"\";\n      switch (val) {\n        case 1:\n          type = \"狗\";\n          break;\n        case 2:\n          type = \"猪\";\n          break;\n        case 3:\n          type = \"锚\";\n          break;\n        case 4:\n          type = \"老鼠\";\n          break;\n      }\n      return type;\n    },\n    //当页面数据条数或者当前页改变的时候也要向后端发送请求\n    handleSizeChange(val) {\n      this.pagesize = val;\n      this.getPetData();\n    },\n    handlechangenum(val) {\n      this.pagenum = val;\n      this.getPetData();\n    },\n    //获取数据\n    getPetData() {\n      this.$request({\n        url: \"/pet/list\",\n        method: \"post\",\n        data: {\n          page_num: this.pagenum,\n          page_size: this.pagesize,\n          community_id: this.community_id,\n          ...this.filters\n        }\n      }).then(res => {\n        res.data.data.list.forEach(item => {\n          return item.created_at / 1000;\n        });\n        this.tableData = res.data.data.list;\n        console.log(this.tableData);\n      });\n    }\n  },\n  mounted() {\n    this.getPetData();\n  },\n  watch: {\n    watchFilters: {\n      handler(newValue, oldValue) {\n        this.getPetData(); //当数据发生变化的时候，向后端重新发送请求\n      },\n\n      deep: true\n    }\n  },\n  computed: {\n    community_id() {\n      if (this.$store.getters.getPostInfo.community_list != undefined) {\n        return this.$store.getters.getPostInfo.community_list[0].community_id;\n      } else {\n        return \"1\";\n      }\n    },\n    watchFilters() {\n      return JSON.parse(JSON.stringify(this.filters));\n    }\n  }\n};","map":{"version":3,"names":["breadCrumb","components","data","filters","sex","undefined","license","remove","bread","coat_color","tableData","tableHeader","prop","label","width","pagenum","pagesize","methods","typeChose","val","type","handleSizeChange","getPetData","handlechangenum","$request","url","method","page_num","page_size","community_id","then","res","list","forEach","item","created_at","console","log","mounted","watch","watchFilters","handler","newValue","oldValue","deep","computed","$store","getters","getPostInfo","community_list","JSON","parse","stringify"],"sources":["src/views/basic/pet/list.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <bread-crumb></bread-crumb>\r\n    <!--筛选列表 -->\r\n    <el-card style=\"margin-top: 20px\">\r\n      <div class=\"item\">\r\n        <span>雌雄：</span>\r\n        <el-radio-group v-model=\"filters.sex\">\r\n          <el-radio-button :label=\"undefined\">全部</el-radio-button>\r\n          <el-radio-button :label=\"1\">雄</el-radio-button>\r\n          <el-radio-button :label=\"0\">雌</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"item\">\r\n        <span>登记：</span>\r\n        <el-radio-group v-model=\"filters.license\">\r\n          <el-radio-button :label=\"undefined\">全部</el-radio-button>\r\n          <el-radio-button :label=\"true\">已登记</el-radio-button>\r\n          <el-radio-button :label=\"false\">未登记</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"item\">\r\n        <span>注销：</span>\r\n        <el-radio-group v-model=\"filters.remove\">\r\n          <el-radio-button :label=\"undefined\">全部</el-radio-button>\r\n          <el-radio-button :label=\"1\">是</el-radio-button>\r\n          <el-radio-button :label=\"0\">否</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"item\">\r\n        <span>品种：</span>\r\n        <el-input\r\n          placeholder=\"请输入品种搜索\"\r\n          v-model=\"filters.bread\"\r\n          style=\"width: 280px\"\r\n        >\r\n          <el-button slot=\"append\">检索</el-button>\r\n        </el-input>\r\n      </div>\r\n      <div class=\"item\">\r\n        <span>毛色：</span>\r\n        <el-input\r\n          placeholder=\"请输入毛色搜索\"\r\n          v-model=\"filters.coat_color\"\r\n          style=\"width: 280px\"\r\n        >\r\n          <el-button slot=\"append\">检索</el-button>\r\n        </el-input>\r\n      </div>\r\n    </el-card>\r\n    <!-- 表格 -->\r\n    <el-card style=\"margin-top: 20px; padding: 0px\">\r\n      <el-table :data=\"tableData\" max-height=\"650\">\r\n        <el-table-column\r\n          v-for=\"item of tableHeader\"\r\n          :key=\"item.prop\"\r\n          :prop=\"item.prop\"\r\n          :label=\"item.label\"\r\n          :minwidth=\"item.width\"\r\n        >\r\n          <div slot-scope=\"scope\" v-if=\"item.prop === 'pet_license'\">\r\n            <el-tag :type=\"scope.row.pet_license ? 'primary' : 'success'\">{{\r\n              scope.row.pet_license ? \"已登记\" : \"未登记\"\r\n            }}</el-tag>\r\n          </div>\r\n          <div slot-scope=\"scope\" v-else-if=\"item.prop === 'remove'\">\r\n            <el-tag :type=\"scope.row.remove ? 'primary' : 'success'\">{{\r\n              scope.row.remove ? \"是\" : \"否\"\r\n            }}</el-tag>\r\n          </div>\r\n          <div slot-scope=\"scope\" v-else-if=\"item.prop === 'sex'\">\r\n            <span>{{ scope.row[item.prop] == 1 ? \"雄\" : \"雌\" }}</span>\r\n          </div>\r\n          <div slot-scope=\"scope\" v-else-if=\"item.prop === 'pet_type'\">\r\n            <span>{{ typeChose(scope.row.pet_type) }}</span>\r\n          </div>\r\n          <div v-else-if=\"item.prop === 'action'\">\r\n            <span style=\"color: skyblue\">查看</span>\r\n          </div>\r\n          <div v-else-if=\"item.prop === 'created_at'\">\r\n            <span>{{\r\n              item.prop.created_at | formatDate(\"YYY-MM-DD HH:mm:ss\")\r\n            }}</span>\r\n          </div>\r\n          <div v-else slot-scope=\"scope\">\r\n            <span>{{ scope.row[item.prop] }}</span>\r\n          </div>\r\n        </el-table-column>\r\n      </el-table>\r\n      <!-- 分页器 -->\r\n      <div class=\"pignation\">\r\n        <el-pagination\r\n          :pagesizes=\"[100, 200, 300, 400]\"\r\n          :page-size=\"pagesize\"\r\n          :total=\"tableData.length\"\r\n          :current-page=\"pagenum\"\r\n          @size-change=\"handleSizeChange\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @current-change=\"handlechangenum\"\r\n        ></el-pagination>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport breadCrumb from \"components/breadCrumb\";\r\nexport default {\r\n  components: { breadCrumb },\r\n  data() {\r\n    return {\r\n      filters: {\r\n        sex: undefined,\r\n        license: undefined,\r\n        remove: undefined,\r\n        bread: undefined,\r\n        coat_color: undefined,\r\n      },\r\n      tableData: [],\r\n      tableHeader: [\r\n        { prop: \"id\", label: \"编号\", width: \"150\" },\r\n        { prop: \"name\", label: \"宠物名\", width: \"100 \" },\r\n        {\r\n          prop: \"pet_type\",\r\n          label: \"宠物类型\",\r\n          width: \"80\",\r\n        },\r\n        { prop: \"sex\", label: \"雌雄\", width: 40 },\r\n        { prop: \"breed\", label: \"品种\", width: 80 },\r\n        { prop: \"coat_color\", label: \"毛色\", width: 60 },\r\n        { prop: \"pet_license\", label: \"宠物登记\", width: 100 },\r\n        { prop: \"remove\", label: \"是否注销\", width: 100 },\r\n        { prop: \"created_at\", label: \"登记时间\" },\r\n        { prop: \"action\", label: \"操作\" },\r\n      ],\r\n      pagenum: 1, //第几页\r\n      pagesize: 10, //这一页有多少条数据这个数据并不会改变表格里面的渲染数据的条数，在表格中他是根据tableData来显示的，tableData有几条数据就显示几条。pagesize作为每页显示的数目，pagenum作为当前页，在向后端请求数据的时候，会发送过去，后端将会根据这两个参数返回相对应的table数据，然后前端拿到这个table数据之后，根据这个数据进行渲染\r\n    };\r\n  },\r\n  methods: {\r\n    typeChose(val) {\r\n      var type = \"\";\r\n      switch (val) {\r\n        case 1:\r\n          type = \"狗\";\r\n          break;\r\n        case 2:\r\n          type = \"猪\";\r\n          break;\r\n        case 3:\r\n          type = \"锚\";\r\n          break;\r\n        case 4:\r\n          type = \"老鼠\";\r\n          break;\r\n      }\r\n      return type;\r\n    },\r\n    //当页面数据条数或者当前页改变的时候也要向后端发送请求\r\n    handleSizeChange(val) {\r\n      this.pagesize = val;\r\n      this.getPetData();\r\n    },\r\n    handlechangenum(val) {\r\n      this.pagenum = val;\r\n      this.getPetData();\r\n    },\r\n    //获取数据\r\n    getPetData() {\r\n      this.$request({\r\n        url: \"/pet/list\",\r\n        method: \"post\",\r\n        data: {\r\n          page_num: this.pagenum,\r\n          page_size: this.pagesize,\r\n          community_id: this.community_id,\r\n          ...this.filters,\r\n        },\r\n      }).then((res) => {\r\n        res.data.data.list.forEach((item) => {\r\n          return item.created_at/1000;\r\n        });\r\n        this.tableData = res.data.data.list;\r\n\t\tconsole.log(this.tableData);\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getPetData();\r\n  },\r\n  watch: {\r\n    watchFilters: {\r\n      handler(newValue, oldValue) {\r\n        this.getPetData(); //当数据发生变化的时候，向后端重新发送请求\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  computed: {\r\n    community_id() {\r\n      if (this.$store.getters.getPostInfo.community_list != undefined) {\r\n        return this.$store.getters.getPostInfo.community_list[0].community_id;\r\n      } else {\r\n        return \"1\";\r\n      }\r\n    },\r\n    watchFilters() {\r\n      return JSON.parse(JSON.stringify(this.filters));\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.item {\r\n  height: 50px;\r\n  padding: 0px;\r\n  line-height: 40px;\r\n  height: 40px;\r\n  padding-left: 20px;\r\n  margin-bottom: 20px;\r\n  text-align: left;\r\n}\r\n.item span {\r\n  margin-right: 20px;\r\n}\r\n.pignation {\r\n  height: 30px;\r\n  margin-top: 30px;\r\n  text-align: right;\r\n}\r\n</style>\r\n"],"mappings":"AA0GA,OAAAA,UAAA;AACA;EACAC,UAAA;IAAAD;EAAA;EACAE,KAAA;IACA;MACAC,OAAA;QACAC,GAAA,EAAAC,SAAA;QACAC,OAAA,EAAAD,SAAA;QACAE,MAAA,EAAAF,SAAA;QACAG,KAAA,EAAAH,SAAA;QACAI,UAAA,EAAAJ;MACA;MACAK,SAAA;MACAC,WAAA,GACA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QACAF,IAAA;QACAC,KAAA;QACAC,KAAA;MACA,GACA;QAAAF,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,EACA;MACAE,OAAA;MAAA;MACAC,QAAA;IACA;EACA;;EACAC,OAAA;IACAC,UAAAC,GAAA;MACA,IAAAC,IAAA;MACA,QAAAD,GAAA;QACA;UACAC,IAAA;UACA;QACA;UACAA,IAAA;UACA;QACA;UACAA,IAAA;UACA;QACA;UACAA,IAAA;UACA;MAAA;MAEA,OAAAA,IAAA;IACA;IACA;IACAC,iBAAAF,GAAA;MACA,KAAAH,QAAA,GAAAG,GAAA;MACA,KAAAG,UAAA;IACA;IACAC,gBAAAJ,GAAA;MACA,KAAAJ,OAAA,GAAAI,GAAA;MACA,KAAAG,UAAA;IACA;IACA;IACAA,WAAA;MACA,KAAAE,QAAA;QACAC,GAAA;QACAC,MAAA;QACAxB,IAAA;UACAyB,QAAA,OAAAZ,OAAA;UACAa,SAAA,OAAAZ,QAAA;UACAa,YAAA,OAAAA,YAAA;UACA,QAAA1B;QACA;MACA,GAAA2B,IAAA,CAAAC,GAAA;QACAA,GAAA,CAAA7B,IAAA,CAAAA,IAAA,CAAA8B,IAAA,CAAAC,OAAA,CAAAC,IAAA;UACA,OAAAA,IAAA,CAAAC,UAAA;QACA;QACA,KAAAzB,SAAA,GAAAqB,GAAA,CAAA7B,IAAA,CAAAA,IAAA,CAAA8B,IAAA;QACAI,OAAA,CAAAC,GAAA,MAAA3B,SAAA;MACA;IACA;EACA;EACA4B,QAAA;IACA,KAAAhB,UAAA;EACA;EACAiB,KAAA;IACAC,YAAA;MACAC,QAAAC,QAAA,EAAAC,QAAA;QACA,KAAArB,UAAA;MACA;;MACAsB,IAAA;IACA;EACA;EACAC,QAAA;IACAhB,aAAA;MACA,SAAAiB,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,cAAA,IAAA5C,SAAA;QACA,YAAAyC,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,cAAA,IAAApB,YAAA;MACA;QACA;MACA;IACA;IACAW,aAAA;MACA,OAAAU,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,MAAAjD,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}