{"ast":null,"code":"import axios from \"axios\";\nimport router from \"../router/index\";\nconst codeMessage = {\n  200: \"服务器成功返回请求的数据\",\n  201: \"新建或修改数据成功\",\n  204: \"删除数据成功\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作\",\n  401: \"用户没有访问权限（令牌、用户名、密码错误）\"\n};\n//登录注册时候的axios封装\nexport function mylocalrequest(config) {\n  const instance = axios.create({\n    baseURL: \"http://127.0.0.1:300/pc\"\n  });\n\n  //响应拦截器\n  instance.interceptors.response.use(res => {\n    if (res.code === 200) {\n      localStorage.setItem('refreshToken', res.data.data.refreshToken);\n      this.notifySuccess(res.msg);\n    }\n    return res.data;\n  });\n  return instance(config);\n}\nexport function myrequest(config) {\n  const instance = axios.create({\n    baseURL: \"http://127.0.0.1:300/pc\"\n    // headers: {\n    //   Authorization: localStorage.getItem(\"token\"),\n    // },\n  });\n\n  instance.interceptors.request.use(config => {\n    let token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"Authorization\"] = token;\n    }\n    return config;\n  });\n  instance.interceptors.response.use(res => {\n    return res.data;\n  }, err => {\n    if (err.msg === \"invalid token\") {\n      this.notifyError(\"无效token，请重新登录\");\n    }\n    router.replace({\n      path: \"/user/login\"\n    });\n    return err;\n  });\n  return instance(config);\n}\nexport function request(config) {\n  const instance = axios.create({\n    baseURL: \"/pc\"\n  });\n  instance.interceptors.response.use(res => {\n    if (Object.keys(codeMessage).includes(`${res.data.code}`)) {\n      this.notifySuccess(codeMessage[res.data.code]);\n    }\n    return res;\n  }, err => {\n    return err;\n  });\n  return instance(config);\n}","map":{"version":3,"names":["axios","router","codeMessage","mylocalrequest","config","instance","create","baseURL","interceptors","response","use","res","code","localStorage","setItem","data","refreshToken","notifySuccess","msg","myrequest","request","token","getItem","headers","err","notifyError","replace","path","Object","keys","includes"],"sources":["D:/前端/e家项目仿照/echome3_16/echome3_16/src/network/config.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"../router/index\";\r\nconst codeMessage = {\r\n  200: \"服务器成功返回请求的数据\",\r\n  201: \"新建或修改数据成功\",\r\n  204: \"删除数据成功\",\r\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作\",\r\n  401: \"用户没有访问权限（令牌、用户名、密码错误）\",\r\n};\r\n//登录注册时候的axios封装\r\nexport function mylocalrequest(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:300/pc\",\r\n  });\r\n\r\n  //响应拦截器\r\n  instance.interceptors.response.use((res) => {\r\n    if (res.code === 200) {\r\n\t\tlocalStorage.setItem('refreshToken',res.data.data.refreshToken)\r\n      this.notifySuccess(res.msg);\r\n    }\r\n    return res.data;\r\n  });\r\n  return instance(config);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function myrequest(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:300/pc\",\r\n    // headers: {\r\n    //   Authorization: localStorage.getItem(\"token\"),\r\n    // },\r\n  });\r\n  instance.interceptors.request.use((config) => {\r\n    let token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = token;\r\n    }\r\n    return config;\r\n  });\r\n  instance.interceptors.response.use(\r\n    (res) => {\r\n      return res.data;\r\n    },\r\n    (err) => {\r\n      if (err.msg === \"invalid token\") {\r\n        this.notifyError(\"无效token，请重新登录\");\r\n      }\r\n\r\n      router.replace({ path: \"/user/login\" });\r\n      return err;\r\n    }\r\n  );\r\n  return instance(config);\r\n}\r\n\r\nexport function request(config) {\r\n  const instance = axios.create({\r\n    baseURL: \"/pc\",\r\n  });\r\n\r\n  instance.interceptors.response.use(\r\n    (res) => {\r\n      if (Object.keys(codeMessage).includes(`${res.data.code}`)) {\r\n        this.notifySuccess(codeMessage[res.data.code]);\r\n      }\r\n      return res;\r\n    },\r\n    (err) => {\r\n      return err;\r\n    }\r\n  );\r\n  return instance(config);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,MAAMC,WAAW,GAAG;EAClB,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE,WAAW;EAChB,GAAG,EAAE,QAAQ;EACb,GAAG,EAAE,4BAA4B;EACjC,GAAG,EAAE;AACP,CAAC;AACD;AACA,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAE;EACrC,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACAF,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAAEC,GAAG,IAAK;IAC1C,IAAIA,GAAG,CAACC,IAAI,KAAK,GAAG,EAAE;MACxBC,YAAY,CAACC,OAAO,CAAC,cAAc,EAACH,GAAG,CAACI,IAAI,CAACA,IAAI,CAACC,YAAY,CAAC;MAC3D,IAAI,CAACC,aAAa,CAACN,GAAG,CAACO,GAAG,CAAC;IAC7B;IACA,OAAOP,GAAG,CAACI,IAAI;EACjB,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACD,MAAM,CAAC;AACzB;AAMA,OAAO,SAASe,SAASA,CAACf,MAAM,EAAE;EAChC,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;IAC5BC,OAAO,EAAE;IACT;IACA;IACA;EACF,CAAC,CAAC;;EACFF,QAAQ,CAACG,YAAY,CAACY,OAAO,CAACV,GAAG,CAAEN,MAAM,IAAK;IAC5C,IAAIiB,KAAK,GAAGR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;IACzC,IAAID,KAAK,EAAE;MACTjB,MAAM,CAACmB,OAAO,CAAC,eAAe,CAAC,GAAGF,KAAK;IACzC;IACA,OAAOjB,MAAM;EACf,CAAC,CAAC;EACFC,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BC,GAAG,IAAK;IACP,OAAOA,GAAG,CAACI,IAAI;EACjB,CAAC,EACAS,GAAG,IAAK;IACP,IAAIA,GAAG,CAACN,GAAG,KAAK,eAAe,EAAE;MAC/B,IAAI,CAACO,WAAW,CAAC,eAAe,CAAC;IACnC;IAEAxB,MAAM,CAACyB,OAAO,CAAC;MAAEC,IAAI,EAAE;IAAc,CAAC,CAAC;IACvC,OAAOH,GAAG;EACZ,CAAC,CACF;EACD,OAAOnB,QAAQ,CAACD,MAAM,CAAC;AACzB;AAEA,OAAO,SAASgB,OAAOA,CAAChB,MAAM,EAAE;EAC9B,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC,CAAC;EAEFF,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BC,GAAG,IAAK;IACP,IAAIiB,MAAM,CAACC,IAAI,CAAC3B,WAAW,CAAC,CAAC4B,QAAQ,CAAE,GAAEnB,GAAG,CAACI,IAAI,CAACH,IAAK,EAAC,CAAC,EAAE;MACzD,IAAI,CAACK,aAAa,CAACf,WAAW,CAACS,GAAG,CAACI,IAAI,CAACH,IAAI,CAAC,CAAC;IAChD;IACA,OAAOD,GAAG;EACZ,CAAC,EACAa,GAAG,IAAK;IACP,OAAOA,GAAG;EACZ,CAAC,CACF;EACD,OAAOnB,QAAQ,CAACD,MAAM,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}